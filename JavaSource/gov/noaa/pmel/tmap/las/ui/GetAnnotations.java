/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package gov.noaa.pmel.tmap.las.ui;

import gov.noaa.pmel.tmap.las.jdom.JDOMUtils;
import gov.noaa.pmel.tmap.las.jdom.LASAnnotations;
import gov.noaa.pmel.tmap.las.jdom.LASConfig;
import gov.noaa.pmel.tmap.las.product.server.LASConfigPlugIn;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** 
 * MyEclipse Struts
 * Creation date: 01-08-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class GetAnnotations extends ConfigService {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private static Logger log = LoggerFactory.getLogger(GetAnnotations.class.getName());
	private static String TEMPLATE = "template";
	private String template;
	
	public String execute() throws Exception {    
		log.info("START: "+request.getRequestURL());
		
		String lock = (String) contextAttributes.get(LASConfigPlugIn.LAS_LOCK_KEY);
        if ( lock != null && lock.equals("true") ) {
        	LASAnnotations lasAnnotations = new LASAnnotations();
			lasAnnotations.setDatasetTitle("Site updating. Reload and try again.");
			request.setAttribute("las_annotations", lasAnnotations);
			log.error("Site updating during processing of annontations.");
			log.info("END:   "+request.getRequestURL());
			setTemplate("/productserver/templates/"+template);
			return TEMPLATE;
        }
        
        LASConfig lasConfig = (LASConfig) contextAttributes.get(LASConfigPlugIn.LAS_CONFIG_KEY);
        request.setAttribute("base_server_url", lasConfig.getBaseServerURL());
	
		String template = request.getParameter("template");
		if ( template == null ) {
			template = "annotations.vm";
		}
		String[] files = request.getParameterValues("file");
		String[] images = request.getParameterValues("image");
		
		if ( files != null ) {
			if ( files.length == 1 ) {			
				LASAnnotations lasAnnotations = new LASAnnotations();
				loadAnnotations(files[0], lasAnnotations);
				request.setAttribute("las_annotations", lasAnnotations);
				
				if ( images != null && !images[0].equals("") ) {
					request.setAttribute("image_file", images[0]);
				}
			} else {
				List<LASAnnotations> annotations = new ArrayList<LASAnnotations>();
				for ( int i = 0; i < files.length; i++ ) {
					LASAnnotations lasAnnotations = new LASAnnotations();
					loadAnnotations(files[i], lasAnnotations);
					annotations.add(lasAnnotations);
				}
				request.setAttribute("las_annotation_files", annotations);
				if ( images != null && !images[0].equals("") ) {
					request.setAttribute("image_files", images);
				}
			}
			log.info("END:   "+request.getRequestURL());
			
			setTemplate("/productserver/templates/"+template);
			return TEMPLATE;
		} else {
			LASAnnotations lasAnnotations = new LASAnnotations();
			lasAnnotations.setDatasetTitle("Error processing annotations file.");
			request.setAttribute("las_annotations", lasAnnotations);
			log.error("Unable to process annontations.");
			log.info("END:   "+request.getRequestURL());
			setTemplate("/productserver/templates/"+template);
			return TEMPLATE;
		}
	}
	private void loadAnnotations(String file, LASAnnotations lasAnnotations) {
		try {
			LASConfig lasConfig = (LASConfig)contextAttributes.get(LASConfigPlugIn.LAS_CONFIG_KEY);
			if ( file != null ) {
				String odir = lasConfig.getOutputDir();
				if ( odir.contains("/..") || odir.contains("../") || file.contains("/..") || file.contains("../") ) {
					throw new Exception("Illegal file name.");
				}
				File f = new File(lasConfig.getOutputDir()+File.separator+file);
				JDOMUtils.XML2JDOM(f, lasAnnotations);
			}
			// Put these objects in the context so the output template can use them.
		} catch ( Exception e ) {
			lasAnnotations.clear();
			lasAnnotations.setDatasetTitle("Error processing annotations file.");
			log.error("Unable to process annontations."+e.getMessage());			
		}
	}
	public String getTemplate() {
		return template;
	}
	public void setTemplate(String template) {
		this.template = template;
	}
}