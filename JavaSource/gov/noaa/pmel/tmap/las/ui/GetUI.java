/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package gov.noaa.pmel.tmap.las.ui;

import gov.noaa.pmel.tmap.exception.LASException;
import gov.noaa.pmel.tmap.las.client.serializable.CategorySerializable;
import gov.noaa.pmel.tmap.las.client.serializable.DatasetSerializable;
import gov.noaa.pmel.tmap.las.client.serializable.VariableSerializable;
import gov.noaa.pmel.tmap.las.jdom.LASBackendResponse;
import gov.noaa.pmel.tmap.las.jdom.LASConfig;
import gov.noaa.pmel.tmap.las.jdom.ServerConfig;
import gov.noaa.pmel.tmap.las.product.server.LASConfigPlugIn;

import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

import org.jdom.JDOMException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** 
 * MyEclipse Struts
 * Creation date: 01-08-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class GetUI extends ConfigService {
    /*
     * Generated Methods
     */

    /** 
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    private static Logger log = LoggerFactory.getLogger(GetUI.class.getName());

    private static String ERROR = "error";
    
    public String execute() throws Exception {    
        //ServletContext context = (ServletContext) servlet.getServletContext();
        StringBuilder query = new StringBuilder();
        
        String lock = (String) contextAttributes.get(LASConfigPlugIn.LAS_LOCK_KEY);
        if ( lock != null && lock.equals("true") ) {
        	String las_message = "Unable to initialize UI.";
            LASBackendResponse lasBackendResponse = new LASBackendResponse();
            lasBackendResponse.setError("las_message", las_message);
            lasBackendResponse.addError("exception_message", "System is updating. Reload and try again.");
            request.setAttribute("las_response", lasBackendResponse);           
            return ERROR;
        }
        
        
        LASConfig lasConfig = (LASConfig) contextAttributes.get(LASConfigPlugIn.LAS_CONFIG_KEY);
        ServerConfig serverConfig = (ServerConfig) contextAttributes.get(LASConfigPlugIn.SERVER_CONFIG_KEY);
        String[] cat_ids = request.getParameterValues("catid");
        String[] data_url = request.getParameterValues("data_url");

        if ( cat_ids != null ) {
            if ( lasConfig.pruneCategories() ) {
                try {

                    int found = 0;
                    for ( int i = 0; i < cat_ids.length; i++ ) {
                        String key_id = lasConfig.addDataset(cat_ids[i]);
                        if ( key_id != null ) {
                            found++;
                            if (!key_id.equals(cat_ids[i]) ) {
                                cat_ids[i] = key_id;
                            }
                        }
                    }
                    if ( found > 0 ) {
                        lasConfig.convertToSeven(true);
                        lasConfig.mergeProperites();
                        lasConfig.addIntervalsAndPoints();    
                        lasConfig.addGridType();
                        //                String fds_base = serverConfig.getFTDSBase();
                        //                String fds_dir = serverConfig.getFTDSDir();
                        //                lasConfig.addFDS(fds_base, fds_dir);
                    } else {
                        throw new Exception("Search did not return any information for the requested data set.");
                    }
                } catch (Exception e) {
                    String las_message = "Unable to initialize UI from the catid values provided.";
                    LASBackendResponse lasBackendResponse = new LASBackendResponse();
                    lasBackendResponse.setError("las_message", las_message);
                    lasBackendResponse.addError("exception_message", e.toString());
                    request.setAttribute("las_response", lasBackendResponse);
                    StackTraceElement[] trace =  e.getStackTrace();
                    log.error(las_message);
                    log.error(e.toString());
                    if ( trace.length > 0 ) {
                        log.error(trace[0].toString());
                    }           
                    return ERROR;
                }

                request.getSession().setAttribute("catid", cat_ids);
            }

            Map<String, String[]> qp = request.getParameterMap();
            for (Iterator qpIt = qp.keySet().iterator(); qpIt.hasNext();) {
                String param = (String) qpIt.next();
                String[] value = qp.get(param);
                if ( !param.equals("catid") ) {
                    for (int i = 0; i < value.length; i++) {
                        query.append(param+"="+value[i]);
                    }
                }
                if ( qpIt.hasNext() ) {
                    query.append("&");
                }
            }
            for (int i = 0; i < cat_ids.length; i++) {
                query.append("catid="+cat_ids[i]);
                if ( i < cat_ids.length - 1 ) {
                    query.append("&");
                }
            }

            String auto = request.getParameter("auto");
            if ( auto != null && auto.equals("true") && cat_ids.length > 0 ) {
                CategorySerializable category = lasConfig.getCategorySerializableWithGrids(cat_ids[0], cat_ids[0]);
                DatasetSerializable dataset = category.getDatasetSerializable();
                VariableSerializable[] vars = dataset.getVariablesSerializable();
                if ( vars != null && vars.length > 0 ) {
                    query.append("&dsid="+dataset.getID()+"&varid="+vars[0].getID());
                }
            } 
        }
        if ( data_url != null ) {
        	for (int i = 0; i < data_url.length; i++ ) {
            	log.debug("Found a data url to add... "+data_url[i]);

        		String ids = lasConfig.getIDs(data_url[i]);
        		// Load all the data if necessary, but only use the first when loading the UI for the default plot
        		if ( i == 0 ) {
        			
                	log.debug("Set ids from data url to... "+ids);

        			query.append(ids);
        		}
        		
        	}
        	// Now that they are added, all at once set up the F-TDS URLs
	        String fds_base = serverConfig.getFTDSBase();
	        String fds_dir = serverConfig.getFTDSDir();
	        try {
	            log.debug("Adding F-TDS attributes to data set.");
	            log.debug("base url: "+fds_base+" local directory "+fds_dir);
	            lasConfig.addFDS(fds_base, fds_dir);
	        } catch (LASException e) {
	            log.error("Could not add F-TDS URLs to data configuration. "+e.toString());
	        } catch (JDOMException e) {
	            log.error("Could not add F-TDS URLs to data configuration. "+e.toString());
	        } catch (IOException e) {
	            log.error("Could not add F-TDS URLs to data configuration. "+e.toString());
	        }
        }
        if ( query.length() > 0 ) query.insert(0, "?");
        log.debug("forwarding to UI.vm"+query.toString());
        // forward to the UI
        response.sendRedirect("UI.vm"+query.toString());
        return null;
    }

}
