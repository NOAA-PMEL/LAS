/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package gov.noaa.pmel.tmap.las.ui;

import gov.noaa.pmel.tmap.las.jdom.JDOMUtils;
import gov.noaa.pmel.tmap.las.jdom.LASConfig;
import gov.noaa.pmel.tmap.las.product.server.LASConfigPlugIn;
import gov.noaa.pmel.tmap.las.util.DataConstraint;

import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Iterator;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.json.JSONException;
import org.json.JSONObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-04-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class GetDataConstraints extends ConfigService {
	/*
	 * Generated Methods
	 */
	private static Logger log = LoggerFactory.getLogger(GetDataConstraints.class.getName());

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public String execute() {
		String query = request.getQueryString();
		if ( query != null ) {
			try{
				query = JDOMUtils.decode(query, "UTF-8");
				log.info("START: "+request.getRequestURL()+"?"+query);
			} catch (UnsupportedEncodingException e) {
				// Don't care we missed a log message.
			}			
		} else {
			log.info("START: "+request.getRequestURL());
		}
		
		String dsID = request.getParameter("dsid");
		String varID = request.getParameter("varid");
		String format = request.getParameter("format");        
		if ( format == null ) {
			format = "json";
		}
		
		String lock = (String) contextAttributes.get(LASConfigPlugIn.LAS_LOCK_KEY);
        if ( lock != null && lock.equals("true") ) {
        	sendError(response, "constraints", format, "Site updating. Reload and try again in a minute.");
        	return null;
        }
		
		LASConfig lasConfig = (LASConfig) contextAttributes.get(LASConfigPlugIn.LAS_CONFIG_KEY);
		
		try {
			ArrayList<DataConstraint> constraints = lasConfig.getConstraints(dsID, varID);
			PrintWriter respout = response.getWriter();
			if ( format.equals("xml") ) {
				response.setContentType("application/xml");
				respout.print(Util.toXML(constraints, "constraints"));
			} else {
				response.setContentType("application/json");
				//JSONObject json_response = Util.toJSON_keep_array(constraints, "constraints");
				JSONObject json_response = toJSON(constraints, "constraints");
				log.debug(json_response.toString(3));
				json_response.write(respout);
			}
			// Catch for IOException, JSONException and JDOMException and anything unexpected.
		} catch (Exception e) {
			sendError(response, "constraints", format, e.toString());
		}
		if ( query != null ) {
			log.info("END:   "+request.getRequestURL()+"?"+query);						
		} else {
			log.info("END:   "+request.getRequestURL());
		}
		return null;
	}

	public JSONObject toJSON(ArrayList<DataConstraint> constraints, String wrapper) throws JSONException {
		JSONObject json_response = new JSONObject();
		JSONObject constraints_object = new JSONObject();
		for (Iterator constraintIt = constraints.iterator(); constraintIt.hasNext();) {
			DataConstraint constraint = (DataConstraint) constraintIt.next();
			JSONObject constraint_object = constraint.toJSON();            
			constraints_object.array_accumulate("constraint", constraint_object);
		}
		constraints_object.put("status", "ok");
		constraints_object.put("error", "");
		json_response.put("constraints", constraints_object);
		return json_response;
	}
}