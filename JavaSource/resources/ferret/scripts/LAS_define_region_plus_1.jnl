! For 2D plots, we use FILL overlaid on a SHADE.  To get the 
! best appearance from this, use /HLIM and /VLIM for the exact
! region, and for the FILL use a region as one grid-cell larger than
! requested so we fill to the outer borders of the plot.

! Compute that region+1 grid cell

! Do not try this for native curvlinear or hybrid z plots.

IF `($do_curvi_xy"0") AND ($native_curvilinear_xy"0")` THEN EXIT/SCRIPT
IF `($do_hybrid_z"0") AND ($native_Z_plot"0")` THEN EXIT/SCRIPT
IF `($do_curvi_xy_and_hybrid_z)` THEN EXIT/SCRIPT
IF `($do_curvi_xy"0") OR ($do_hybrid_z"0") OR ($do_curvi_xy_and_hybrid_z)` THEN EXIT/SCRIPT

DEFINE SYMBOL varshape = `($ferret_plot_var),RETURN=shape`
IF `STRLEN("($varshape)") EQ 2` THEN
   LET ferretvar = ($ferret_plot_var_noregion)

! First dimension
   DEFINE SYMBOL dim = `SUBSTRING("($varshape)", 1, 1)`
   DEFINE SYMBOL  Pseudo_coord = XYZT
   DEFINE SYMBOL  Pseudo_index = IJKL
   LET idim = STRINDEX("($pseudo_coord)", "($dim)")
   DEFINE SYMBOL indx = `SUBSTRING ("($pseudo_index)", idim, 1)`

   LET is_mod = 0
   IF `STRINDEX ("($dim)", "X") GT 0 OR STRINDEX ("($dim)", "T") GT 0` THEN
      DEFINE SYMBOL modax = "`($data_var), RETURN=($dim)mod`"
      IF `STRCMP(($modax), " ") NE 0` THEN LET is_mod = 1
   ENDIF

! See if the region limits are within the axis limits: for convenience
! datasets may be configured as y=-90:90 when really they are slightly less...

   IF `is_mod EQ 0` THEN 
      LET axlo = ($dim)boxlo[g($dim)=ferretvar,($indx)=1]
      LET axsiz = `ferretvar,return=($indx)size`
      LET axhi = ($dim)boxhi[g($dim)=ferretvar,($indx)=`axsiz`]

      LET nlo = 1
      IF `($region_($dim)_lo) GT axlo` THEN \
         LET nlo = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_lo)"]
      LET nhi = axsiz
      IF `($region_($dim)_hi) LT axhi` THEN \
         LET nhi = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_hi)"]
   
      LET nlo = `nlo - 1`
      LET nhi = `nhi + 1`
 
      LET axsiz = `($data_var),RETURN=($indx)size`
      LET nlo = `MAX(1,nlo)`
      LET nhi = `MIN(axsiz,nhi)`
   ENDIF

   IF `is_mod` THEN   ! modulo, so no such problems
      LET nlo = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_lo)"]
      LET nhi = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_hi)"]
      LET nlo = `nlo - 1`
      LET nhi = `nhi + 1`
   ENDIF

   LET alo = ($dim)[g($dim)=ferretvar,($indx)=`nlo`]
   LET ahi = ($dim)[g($dim)=ferretvar,($indx)=`nhi`]

   DEFINE SYMBOL region_($dim)_plus = ($dim)=`alo`:`ahi`

! Second dimension
   DEFINE SYMBOL dim = `SUBSTRING("($varshape)", 2, 1)`
   DEFINE SYMBOL  Pseudo_coord = XYZT
   DEFINE SYMBOL  Pseudo_index = IJKL
   LET idim = STRINDEX("($pseudo_coord)", "($dim)")
   DEFINE SYMBOL indx = `SUBSTRING ("($pseudo_index)", idim, 1)`

   LET is_mod = 0
   IF `STRINDEX ("($dim)", "X") GT 0 OR STRINDEX ("($dim)", "T") GT 0` THEN
      DEFINE SYMBOL modax = "`($data_var), RETURN=($dim)mod`"
      IF `STRCMP(($modax), " ") NE 0` THEN LET is_mod = 1
   ENDIF

   IF `is_mod EQ 0` THEN 
      LET axlo = ($dim)boxlo[g($dim)=ferretvar,($indx)=1]
      LET axsiz = `ferretvar,return=($indx)size`
      LET axhi = ($dim)boxhi[g($dim)=ferretvar,($indx)=`axsiz`]

      LET nlo = 1
      IF `($region_($dim)_lo) GT axlo` THEN \
         LET nlo = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_lo)"]
      LET nhi = axsiz
      IF `($region_($dim)_hi) LT axhi` THEN \
         LET nhi = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_hi)"]
   
      LET nlo = `nlo - 1`
      LET nhi = `nhi + 1`
 
      LET axsiz = `($data_var),RETURN=($indx)size`
      LET nlo = `MAX(1,nlo)`
      LET nhi = `MIN(axsiz,nhi)`
   ENDIF

   IF `is_mod` THEN  ! modulo, so no such problems
      LET nlo = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_lo)"]
      LET nhi = ($indx)[g($dim)=ferretvar,($dim)="($region_($dim)_hi)"]
      LET nlo = `nlo - 1`
      LET nhi = `nhi + 1`
   ENDIF

   LET alo = ($dim)[g($dim)=ferretvar,($indx)=`nlo`]
   LET ahi = ($dim)[g($dim)=ferretvar,($indx)=`nhi`]
   DEFINE SYMBOL region_($dim)_plus = ($dim)=`alo`:`ahi`

ENDIF

! --------------End of LAS_define_region_plus_1.jnl

