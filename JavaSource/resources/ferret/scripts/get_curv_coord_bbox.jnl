! Special version of get_curv_coord_bbox.jnl with kludge to
! speed up finding the bounding-box.

! get_curv_coord_bbox.jnl
! Fixing ticket 1732: remove the kludge, returning the whole range
! of indices if we don not have a map file.
!
! ACM 11/18 When it's a tri-polar grid can use a simple mask to get the box
!

! get the I,J range from curvilinear coordinate variables for
! the requested output rectangle defined by 
!    ($region_x_lo):($region_x_hi)
!    ($region_y_lo):($region_y_hi)
!
! The output is returned as symbols 

! clon_imin
! clon_imax
! clat_jmin
! clat_jmax

! If this has already been called, we are done.
! Do for each variable, difference plots may have different
! x or y regions.
IF ($curv_coord_bbox_done($num)"0") THEN EXIT/SCRIPT
DEFINE SYMBOL curv_coord_bbox_done($num) = 1


! For analysis operations on curvilienar grids we may not have definitions for region_x_* and
! region_y_*  but there should be region_0_**

IF `($region_x_lo"-999") EQ -999` THEN
   DEFINE SYMBOL remove_x_region = 1
   DEFINE SYMBOL region_x_lo = ($region_0_x_lo)
   DEFINE SYMBOL region_x_hi = ($region_0_x_hi)
ENDIF
IF `($region_y_lo"-999") EQ -999` THEN
   DEFINE SYMBOL remove_y_region = 1
   DEFINE SYMBOL region_y_lo = ($region_0_y_lo)
   DEFINE SYMBOL region_y_hi = ($region_0_y_hi)
ENDIF

! Make computations based on the range of lon/lat in the grid.

IF `($ferret_curv_lon_min%0|*>1%) EQ 0` THEN \
   DEFINE SYMBOL ferret_curv_lon_min = `($ferret_curvi_coord_lon)[x=@min,y=@min]`
IF `($ferret_curv_lon_max%0|*>1%) EQ 0` THEN \
   DEFINE SYMBOL ferret_curv_lon_max = `($ferret_curvi_coord_lon)[x=@max,y=@max]`
IF `($ferret_curv_lat_min%0|*>1%) EQ 0` THEN \
   DEFINE SYMBOL ferret_curv_lat_min = `($ferret_curvi_coord_lat)[x=@min,y=@min]`
IF `($ferret_curv_lat_max%0|*>1%) EQ 0` THEN \
   DEFINE SYMBOL ferret_curv_lat_max = `($ferret_curvi_coord_lat)[x=@max,y=@max]`

LET ncurv_x = `($ferret_curvi_coord_lon),RETURN=isize`
LET ncurv_y = `($ferret_curvi_coord_lon),RETURN=jsize`
LET del_x = (($ferret_curv_lon_max) - (($ferret_curv_lon_min)) )/(ncurv_x/2)
LET del_y = (($ferret_curv_lat_max) - (($ferret_curv_lat_min)) )/(ncurv_y/2)


! If the whole grid, or nearly the whole grid, is specified, we are done.
! Make it half the grid...

IF ($ferret_curv_lon_min"0|*>1") THEN

   LET ndel_x = `0.5*ABS(($ferret_curv_lon_min) - ($ferret_curv_lon_max))`
   LET ndel_y = `0.5*ABS(($ferret_curv_lat_min) - ($ferret_curv_lat_max))`
   
   LET xcurvdiff = ABS(($ferret_curv_lon_max) - (($ferret_curv_lon_min)) )
   LET xregdiff  = ABS(($region_x_hi)  - (($region_x_lo)))
   LET ycurvdiff = ABS(($ferret_curv_lat_max) - (($ferret_curv_lat_min)) )
   LET yregdiff  = ABS(($region_y_hi) - (($region_y_lo)) )

   IF `(ABS(xcurvdiff - xregdiff) LT ndel_x) AND\ 
       (ABS(ycurvdiff - yregdiff) LT ndel_y)` THEN
      LET clon_imin = 1
      LET clon_imax = ncurv_x

      LET clat_jmin = 1
      LET clat_jmax = ncurv_y

      DEFINE SYMBOL clon_imin `clon_imin`
      DEFINE SYMBOL clon_imax `clon_imax`
      DEFINE SYMBOL clat_jmin `clat_jmin`
      DEFINE SYMBOL clat_jmax `clat_jmax`

      GO cancel_temp_regions
      EXIT/SCRIPT
   ENDIF  
ENDIF

! If there is a precomputed mapping file for curvilinear-to-rectilinear regridding,
! then the task is easy.
! See http://ferret.pmel.noaa.gov/FERRET_17sep07/FAQ/custom_plots/subsetting_curvi_data.html
!        for each  m = 1, nlon_out 
!        for each  n = 1, nlat_out
!
!            for each k=1, num_neighbors
!
!               MAP(m,n,k,1) = wt(m,n,k)
!               MAP(m,n,k,2) = in_curv_lon(m,n,k)
!               MAP(m,n,k,3) = in_curv_lat(m,n,k)
!
! So, find the m,n corresponding to the output grid location of the corners of our region
! and get the map indices 


! Check to see if curvi_coord_map file is defined. If more than one is defined,
! use the one with the finest grid size.

IF ($ferret_curvi_coord_mapfile"0|*>1") THEN   DEFINE SYMBOL box_cf_map_url \"($ferret_curvi_coord_mapfile)\"

! Punt if we have already strided (to be fixed...)
IF `($ferret_curvi_coord_lat"0|*>1") AND (($xstride"0|*>1") OR ($ystride"0|*>1"))` THEN \
   CANCEL SYMBOL box_cf_map_url

IF ($box_cf_map_url"0|*>1") THEN  ! If we have a map file, use it.

   DEFINE SYMBOL cf_map_var = ($ferret_curvi_coord_mapvar)
   SET DATA/SAVE

! Remove the extra set of double quotes. box_cf_map_url is already defined with quotes, above.
   SET DATA ($box_cf_map_url)
   SET AXIS/MODULO/UNITS=degrees `($cf_map_var),RETURN=xaxis`
   SET AXIS/UNITS=degrees `($cf_map_var),RETURN=yaxis`
   DEFINE SYMBOL mapfile_num = `($cf_map_var),RETURN=dsetnum`

   LET nx = `map[d=($mapfile_num),j=1,k=1,L=1,x=@ngd]`
   LET ny = `map[d=($mapfile_num),i=1,k=1,L=1,y=@ngd]`

! map(m,n,k,2) are indices corresponding to longitude indices

   LET imin = `i[gx=map,x=($region_x_lo)] - 1`
   LET imax = `i[gx=map,x=($region_x_hi)] + 1`

   ! Push the coordinate outwards by 1
   ! IF x coords are not modulo, need to do the following for x too.
! 
!   LET jmin = `MAX(1, j[gy=map,y=($region_y_lo)] - 1)`
!   LET jmax = `MIN(ny, j[gy=map, y=($region_y_hi)] + 1)`

   LET yy = yboxlo[gy=map]
   LET ylo = yy[j=1]
   LET ylo = MAX(`ylo`, ($region_y_lo))

   LET yy = yboxhi[gy=map]
   LET yhi = yy[j=`ny`]
   LET yhi = MIN(`yhi`, ($region_y_hi))

   LET jmin = MAX(1, j[gy=map,y=`ylo`] - 1)
   LET jmax = MIN(ny, j[gy=map, y=`yhi`] + 1)

! Look at the values along the line i=imin, return the outer index for imin 
   LET aa = map[I=`imin`, K=@MIN, L=2]
   LET bb = aa[J=`jmin`:`jmax`@MIN]
   DEFINE SYMBOL clon_imin = `bb`
   IF `($clon_imin) LE 0` THEN DEFINE SYMBOL clon_imin = 1
   
! Look at the values along the line imax, return the outer index for imax
   LET aa = map[I=`imax`, K=@MAX, L=2]
   LET bb = aa[J=`jmin`:`jmax`@MAX]
   DEFINE SYMBOL clon_imax = `bb`

! Look at the values along the line j=jmin, return the outer index for jmin
   LET aa = map[J=`jmin`, K=@MIN, L=3]
   LET bb = aa[I=`imin`:`imax`@MIN]
   DEFINE SYMBOL clat_jmin = `bb`
   IF `($clat_jmin) LE 0` THEN DEFINE SYMBOL clat_jmin = 1
   
! Look at the values along the line j=jmax, return the outer index for jmax

   LET aa = map[J=`jmax`, K=@MAX, L=3]
   LET bb = aa[I=`imin`:`imax`@MAX]
   DEFINE SYMBOL clat_jmax = `bb`

! If the region extends over the branch cut, return the whole 
! range of longitude indices

   IF `($clon_imin) GE ($clon_imax)` THEN
      DEFINE SYMBOL clon_imin 1
      LET  box_longitude = ($ferret_curvi_coord_lon)[d=($data_num)]
      DEFINE SYMBOL clon_imax `box_longitude,RETURN=isize`
   ENDIF

! See if we have captured the X region and if not go to the entire range )if
! the requested region is where things are really curvi, and if the branch 
! cut is also in the vicinity, then the box found above may still miss the mark).

   LET xmin = `MIN(($ferret_curvi_coord_lon)[d=($data_num),i=($clon_imin),j=($clat_jmin)], \
          ($ferret_curvi_coord_lon)[d=($data_num),i=($clon_imin),j=($clat_jmax)] ) `
   LET xmax = `MAX(($ferret_curvi_coord_lon)[d=($data_num),i=($clon_imax),j=($clat_jmin)], \
          ($ferret_curvi_coord_lon)[d=($data_num),i=($clon_imax),j=($clat_jmax)] )`
   IF `(xmin GT ($region_x_lo)) OR (xmax LT ($region_x_hi) )` THEN
      DEFINE SYMBOL clon_imin 1
      LET  box_longitude = ($ferret_curvi_coord_lon)[d=($data_num)]
      DEFINE SYMBOL clon_imax `box_longitude,RETURN=isize`
   ENDIF

   CAN DATA ($mapfile_num)
   SET DATA/RESTORE
   
   GO cancel_temp_regions
   EXIT/SCRIPT
ENDIF  ! if we have a map 
LET kludge = 1




IF `kludge LT 1` THEN
   LET  box_longitude = ($ferret_curvi_coord_lon)[d=($data_num)]
   LET  box_latitude = ($ferret_curvi_coord_lat)[d=($data_num)]

ELSE

! This simple method works fine for at least the tri-polar grid. 
! Maybe not for more elaborate grids

LET is_tripolar = 0
LET attnames = ..attnames
IF `IS_ELEMENT_OF_STR_N (attnames, "grid") GT 0` THEN 
   DEFINE SYMBOL grid_desc = `..grid`

   LET is_tripolar = `STRINDEX("($grid_desc)", "tri") GT 0 AND STRINDEX("($grid_desc)", "polar") GT 0`
   IF `is_tripolar GT 0` THEN \
      LET is_tripolar = `STRINDEX("($grid_desc)", "tri") LT STRINDEX("($grid_desc)", "polar")`

ENDIF

IF `is_tripolar GT 0` THEN  
   let cmin = `($ferret_curvi_coord_lon)[x=@min,y=@min]`
   let cmax = `($ferret_curvi_coord_lon)[x=@max,y=@max]`

   IF `($REGION_0_X_LO) LT cmin OR ($REGION_0_X_HI) GT cmax` THEN  ! outside the native region. Let Ferret do moduloing
      LET x_region_mask = IF ($ferret_curvi_coord_lon) THEN 1
   ELSE
      LET x_region_mask = IF ($ferret_curvi_coord_lon) GE ($REGION_0_X_LO) AND ($ferret_curvi_coord_lon) LE ($REGION_0_X_HI) then 1
   ENDIF
   LET y_region_mask = IF ($ferret_curvi_coord_lat) GE ($REGION_0_y_LO) AND ($ferret_curvi_coord_lat) LE ($REGION_0_y_HI) then 1

   LET xy_region_mask = x_region_mask*y_region_mask

   LET ii = i[gx=($ferret_curvi_coord_lon)] + 0*j[gy=($ferret_curvi_coord_lon)]
   LET jj = j[gy=($ferret_curvi_coord_lon)] + 0*i[gx=($ferret_curvi_coord_lon)]
   LET iiregion_mask = ii* xy_region_mask
   LET jjregion_mask = jj* xy_region_mask

   DEFINE SYMBOL clon_imin = `iiregion_mask[i=@min,j=@min]`
   DEFINE SYMBOL clon_imax = `iiregion_mask[i=@max,j=@max]`

   DEFINE SYMBOL clat_jmin = `jjregion_mask[i=@min,j=@min]`
   DEFINE SYMBOL clat_jmax = `jjregion_mask[i=@max,j=@max]`

   EXIT/SCRIPT

ELSE

!!!!!!!!!!!!!!!!
! THE LOGIC BELOW JUST FAILS FOR SOME GRIDS AND REGIONS.
! RETURN THE WHOLE GRID.

   DEFINE SYMBOL clon_imin 1
   DEFINE SYMBOL clon_imax `($ferret_curvi_coord_lon),RETURN=isize`
   DEFINE SYMBOL clat_jmin 1
   DEFINE SYMBOL clat_jmax `($ferret_curvi_coord_lat),RETURN=jsize`

   EXIT/SCRIPT
ENDIF

!!!!!!!!!!!!!!!!

! When there is no index map, make a coarse map file. Here is a 
! VERY KLUDGY way of getting a subset of the data to do this on, 
! otherwise its very slow...

   LET nx = `($ferret_curvi_coord_lon)[d=($data_num),j=1,x=@ngd]`
   LET ny = `($ferret_curvi_coord_lon)[d=($data_num),i=1,y=@ngd]`

   LET ns = 10 !50
   LET dx = MAX(1,`INT(nx/ns)`)
   LET dy = MAX(1,`INT(ny/ns)`)
   LET  box_longitude = ($ferret_curvi_coord_lon)[d=($data_num),i=1:`nx`:`dx`,j=1:`ny`:`dy`]
   LET  box_latitude = ($ferret_curvi_coord_lat)[d=($data_num),i=1:`nx`:`dx`,j=1:`ny`:`dy`]
ENDIF

! See if this is a rectangle or an X line; if an X line then expand
! the region to make a rectangle.

! expand relative to the grid itself. Previous use of 4 deg way too
! large if the grid itself spans a small region.


IF `($region_x_hi"-999|*>1") EQ -999` THEN
   IF `($region_0_x_hi) GT ($region_0_x_lo)` THEN
      LET box_x_lo = ($region_0_x_lo)
      LET box_x_hi = ($region_0_x_hi) 
   ELSE
      LET box_x_lo = `($region_0_x_lo) - 4.`
      LET box_x_hi = `($region_0_x_hi) + 4.`
      LET box_x_lo = `($region_0_x_lo) - del_x`
      LET box_x_hi = `($region_0_x_hi) + del_x`
   ENDIF
ELSE
   IF `($region_x_hi) GT ($region_x_lo)` THEN
      LET box_x_lo = ($region_x_lo)
      LET box_x_hi = ($region_x_hi) 
   ELSE
      LET box_x_lo = `($region_x_lo) - 4.`
      LET box_x_hi = `($region_x_hi) + 4.`
      LET box_x_lo = `($region_x_lo) - del_x`
      LET box_x_hi = `($region_x_hi) + del_x`
   ENDIF
ENDIF

! See if this is a rectangle or a Y line; if a Y line then expand
! the region to make a rectangle.

IF `($region_y_hi"-999|*>1") EQ -999` THEN

   IF `($region_0_y_hi) GT ($region_0_y_lo)` THEN
      LET box_y_lo = ($region_0_y_lo)
      LET box_y_hi = ($region_0_y_hi) 
   ELSE
      LET box_y_lo = `($region_0_y_lo) - 4.`
      LET box_y_hi = `($region_0_y_hi) + 4.`
      LET box_y_lo = `($region_0_y_lo) - del_y`
      LET box_y_hi = `($region_0_y_hi) + del_y`
   ENDIF
ELSE

   IF `($region_y_hi) GT ($region_y_lo)` THEN
      LET box_y_lo = ($region_y_lo)
      LET box_y_hi = ($region_y_hi) 
   ELSE
      LET box_y_lo = `($region_y_lo) - 4.`
      LET box_y_hi = `($region_y_hi) + 4.`
      LET box_y_lo = `($region_y_lo) - del_y`
      LET box_y_hi = `($region_y_hi) + del_y`
   ENDIF
ENDIF


! Define a small output grid, 2x2 and use the curvilinear map function

! The variable map includes the indices within the source 
! grid which correspond to coordinates in the destination grid.
! These are the lower lon and lat and upper lon and lat indices:

DEFINE AXIS/X=`box_x_lo`:`box_x_hi`/NPOINTS=2/MODULO/UNITS=degrees xaxbox
DEFINE AXIS/Y=`box_y_lo`:`box_y_hi`/NPOINTS=2/UNITS=degrees yaxbox
 
!  Define a variable on the output grid

LET lonlatbox = Y[GY=yaxbox] + X[GX=xaxbox]
 
! Compute weights for the mapping
 
LET mapbox = curv_to_rect_map (box_longitude, box_latitude, lonlatbox, 10)

! e.g. here are the longitude indices (L=2) and latitude indices (L=3)
! the four nearest neighbors (K=1:4) in the curvilinear grid, which map
! to the i=1,j=1 location on the output axes.

LOAD mapbox
LIST/I=1/J=1/L=2:3 mapbox

DEFINE SYMBOL clon_imin `mapbox[i=1,j=@min,l=2,k=@min]`
DEFINE SYMBOL clon_imax `mapbox[i=2,j=@max,l=2,k=@max]`
DEFINE SYMBOL clat_jmin `mapbox[i=@min,j=1,l=3,k=@min]`
DEFINE SYMBOL clat_jmax `mapbox[i=@max,j=2,l=3,k=@max]`

! Restore striding done above, via DX,DY; making sure indices 
! dont go outside data range.
IF `KLUDGE GE 1` THEN
   DEFINE SYMBOL clon_imin `MAX(1,dx*mapbox[i=1,j=@min,l=2,k=@min]-dx)`
   DEFINE SYMBOL clon_imax `MIN(nx,dx*mapbox[i=2,j=@max,l=2,k=@max]+dx)`
   DEFINE SYMBOL clat_jmin `MAX(1,dy*mapbox[i=@min,j=1,l=3,k=@min]-dy)`
   DEFINE SYMBOL clat_jmax `MIN(ny,dy*mapbox[i=@max,j=2,l=3,k=@max]+dy)`
ENDIF

! If the region extends over the branch cut, return the whole 
! range of longitude indices

IF `($clon_imin) GE ($clon_imax)` THEN
   DEFINE SYMBOL clon_imin 1
   DEFINE SYMBOL clon_imax `box_longitude,RETURN=isize`
ENDIF

! For modulo curvilinear plots, need the whole range of I regardless
DEFINE SYMBOL clon_imin_computed ($clon_imin)
DEFINE SYMBOL clon_imax_computed ($clon_imax)

IF ($ferret_lon_modulo"0|0|*>1") THEN
   DEFINE SYMBOL clon_imin 1
   DEFINE SYMBOL clon_imax `($ferret_curvi_coord_lon)[j=1,x=@NGD]`
ENDIF

GO cancel_temp_regions
! End of get_curv_coord_bbox.jnl ------------------------------------------------------

