! DSG_find_roles.jnl
! Find the Profile or Trajectory dimension and get its size
! Find the Obs dimension and get its size
! 4/3/2017 *acm* Additions for point data types
! 4/3/2017 *acm* Handle datasets where dimensions are not also coordinate variables
! 11/2018  *acm* Handle datasets where feature-variable is a coordinate variable with numeric feature ids

LET var_attnames = ($vname).attnames

IF `IS_ELEMENT_OF_STR(var_attnames, "cf_role")` THEN 
   LET featureSize = `($vname),RETURN=msize`
   DEFINE SYMBOL feature_variable = ($vname)
ENDIF

IF `IS_ELEMENT_OF_STR(var_attnames, "sample_dimension")` THEN 
   DEFINE SYMBOL obsdim = `($vname).sample_dimension`
   LET obsXvar = x[gx=($obsdim)]
   LET obsSize = `obsXvar,RETURN=isize`
   DEFINE SYMBOL rowvar = ($vname)
ENDIF 

! The cf_role attribute might be on a coordinate variable. 
! If so, set up index as the feature id. LAS expects a 
! the feature variable to be a string.
! We probably want to concoct names based on the location and time.
! Write a function to return the list for best flexibility.


! Use ..coordnames for coordinate-variable namesinstead of ..dimnames. 
! Some files have dimensions that are not coordinate variables.


IF `($feature_variable"0|*>1")` THEN
   LET feature_name = ($feature_variable)
   LET cnames = ..coordnames

   IF `STRINDEX("($feature_variable)", "(") GT 0` THEN 
      DEF SYM dname = `cnames[i=($q)]`

! are the feature-id's numeric"?  and not just 1,2,3...? 
! If so make them become the id string.
      
      let ee_var = _e[ge=($dname)] + 1
      let ee_siz = `ee_var,return=msize`
      IF `ee_var[m=@max] NE ee_siz` THEN
         LET nlen = INT(1+LOG(ee_var[m=@max]))
	 LET/d=($dsetnum"1") feature_name = FLOATSTR(ee_var, "(i`nlen`)")

! otherwise concoct id's based on the location/ time
      ELSE  

      IF `($data_lon_var"0|*>1") + ($data_lat_var"0|*>1") + ($data_time_var"0|*>1") LT 3` THEN
         MESSAGE/ERROR **ERROR Did not find longitude, latitude and time variables in the dataset
         EXIT/PROGRAM
      ENDIF

      LET tmax = ($data_time_var)[x=@MAX,m=@MAX]
      LET tmin = ($data_time_var)[x=@MIN,m=@MIN]

      LET since_loc = STRINDEX("`($data_time_var).units`","since") - 2
      IF `since_loc GT 1` THEN 
         LET tunits = SUBSTRING("`($data_time_var).units`",1,`since_loc`)
         DEFINE SYMBOL tunits = `tunits`
      ENDIF
      DEFINE AXIS/T=`tmin`:`tmax`:1/T0="`($data_time_var).time_origin`"/units=($tunits) taxis_for_name 

      let tt_for_name = t[gt=taxis_for_name,L=1]

! are lon,lat,time on the obs axis?  If so make labels with the first location and time
! of each trajectory
      LET nx = `($data_lat_var),RETURN=isize`
      LET nm = `($data_lat_var),RETURN=msize`
      IF `nx GT nm` THEN 
         LET nr = `($rowvar),RETURN=msize`
         LET end_of_traj = xsequence(($rowvar)[m=@rsum])
         LET start_of_traj = XCAT(1,end_of_traj+1)
         LET lonsample = SAMPLEI (($data_lon_var), start_of_traj)
         LET lonsample360 = IF lonsample GE 0 THEN lonsample ELSE lonsample+360
         LET latsample = SAMPLEI (($data_lat_var), start_of_traj)
         LET timsample = SAMPLEI (($data_time_var), start_of_traj)

         LET xlon_for_name = lonsample360[i=1:`nr`]
         LET xlat_for_name = latsample[i=1:`nr`]
         LET xtim_for_name = timsample[i=1:`nr`]
      ELSE
         LET xlon_for_name = XSEQUENCE(IF ($data_lon_var) GE 0 THEN ($data_lon_var) ELSE ($data_lon_var)+360 )
         LET xlat_for_name = XSEQUENCE(($data_lat_var))
         LET xtim_for_name = XSEQUENCE(($data_time_var))
      ENDIF

      LET/d=($dsetnum"1") feature_name = RESHAPE(LON_LAT_TIME_STRING(xlon_for_name, \
          xlat_for_name, xtim_for_name, tt_for_name, "($feature_type%A%)"), ($rowvar))
      DEFINE SYMBOL feature_name_list = 1

      ENDIF ! concoct id's

      DEFINE SYMBOL feature_variable = feature_name

! Is this one of the variables in the plot (color-by?) If so, redefine the symbol

      REPEAT/range=0:`($data_count)-1`/name=ic (\
        DEFINE SYMBOL ic = `ic`;\
        IF ($data_($ic)_var"0|($dname)>1|*>0") THEN \
         DEFINE SYMBOL data_($ic)_var = feature_name)
   ENDIF

ENDIF

!---------------- end of DSG_find_roles.jnl -------------------------
