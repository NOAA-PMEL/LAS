!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! $Header$
! insitu_waterfall_zt.jnl
!
! Creates a ZT Waterfall plot 
! 10/2017 Fix for different-shaped data. Check that variable time_units defined before using.
!  4/2018 Ferret updates require that the time-variable has units of seconds since origin.
!
! Set the gif filename, changing it from .gif to the name from this request
! Set up to write info to the debug log so that FshowGO can be used
GO LAS_initial_setup

! Initialize the region and data.

DEFINE SYMBOL  data_initialization_script = feature_initialize_data_insitu

! DEFINE SYMBOL  ferret_label = 0

SET MODE verify:always  ! allows for debugging

DEFINE SYMBOL ribbon = 1   ! straight lines colored by the color var
!DEFINE SYMBOL ribbon = 0   ! wiggly waterfall plots, still colored if there is a color palette.
DEFINE SYMBOL its_insitu = 1

GO LAS_initialize_region 0

IF ($data_0_var"0|vid>1|*>0")  THEN
   DEFINE SYMBOL  ferret_by_id = 1
   USE "($data_0_url)"
   LET varnames = ..varnames

   DEFINE SYMBOL  data_0_var = `varnames[i=1]`
   CANCEL DATA "($data_0_url)"
ENDIF
GO LAS_initialize_data 0

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Set the URL label for the first dataset.
GO LAS_url_label 0

! Create the profile variables and symbols

IF `color_by_feature EQ 1` THEN GO LAS_initialize_feature_id

DEFINE SYMBOL variable_lab = ($variable_lab) at depth (meters)

! Apply any constraints

LET xvar = ($data_var)
LET nx_var = `($data_var),RETURN=isize`

LET var_mask = 1+0*x[gx=xvar,i=1:`nx_var`]
LET subset_mask = 1
LET text_mask = 1
LET ntext_masks = 0

IF ($constraint_0_lhs"0|*>1) THEN
   GO prop_prop_constraints
ENDIF

LET constraints_mask = var_mask* text_mask
LET constraints_mask1 = var_mask* text_mask

! Apply the constraints mask

LET var_data_masked = constraints_mask * ($data_var)
DEFINE SYMBOL  data_var = var_data_masked

! For the annotations
DEFINE SYMBOL  ngood_data = `($data_var)[i=@NGD]`
DEFINE SYMBOL  nbad_data = `($data_var)[i=@NBD]`

LET nout_lonlat = `var_data_masked[i=@ngd]`
DEFINE SYMBOL  nout_lonlat = `nout_lonlat` 

IF ($ferret_plot_key"0|date_key>1|*>0") THEN

   LET tmin = ($data_t_var)[i=@MIN]
   LET tmax = ($data_t_var)[i=@MAX]

   LET since_loc = STRINDEX("`($data_t_var).units`","since") - 2
   IF `since_loc GT 1` THEN
      LET tunits = SUBSTRING("`($data_t_var).units`",1,`since_loc`)
      DEFINE SYMBOL  tunits = `tunits`
   ENDIF



! Adjust if start and end times are too close together
   LET oneday = 1

   let time_unitsok =`time_units,return=isready` 
   if `time_unitsok eq 0` then let time_units = tunits
   IF `STRINDEX(time_units, "sec") GT 0` THEN LET oneday = 24*60*60
   IF `STRINDEX(time_units, "min") GT 0` THEN LET oneday = 24*60
   IF `STRINDEX(time_units, "ho") GT 0` THEN LET oneday = 24
   IF `STRINDEX(time_units, "da") GT 0` THEN LET oneday = 1
   IF `tmin-tmax LT 1.e-3` THEN
      IF `tmin GT 0` THEN 
         LET tmin = `tmin - oneday`
         LET tmax = `tmax + oneday`
      ELSE
         LET tmin = `tmin + oneday`
         LET tmax = `tmax - oneday`
      ENDIF   
   ENDIF

   DEFINE AXIS/T=`tmin`:`tmax`:1/T0="`($data_t_var).time_origin`"/units=($tunits) time_axis

   LET ttvar = t[gt=time_axis]
   DEFINE SYMBOL  datekey_time_arg = ttvar

   DEFINE SYMBOL  margin = 1
   DEFINE SYMBOL  ferret_fill_levels = 30

ENDIF

IF ($ferret_by_id"0|*>1") THEN
   DEFINE SYMBOL  ferret_palette = more_by_levels
   DEFINE SYMBOL  ferret_fill_levels = `($rowvar),RETURN=lsize`
   LET id_data = COMPRESSI(XSEQUENCE(TRANSPOSE_XZ(id_by_c)))
   LET var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL  var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL  ferret_plot_title Colored by Profile Number
ENDIF

! Plot qualifiers (graticule lines etc)
GO LAS_set_plot_qualifiers 

! Open the window
GO LAS_open_window

! Turn on annotate_key, which persists until turned off
! (unless key_annoatate property tells us otherwise).

IF ($ferret_key_annotate"1|0|1|*>1") THEN
   KEYMARK 1
ELSE
   KEYMARK 0
ENDIF

IF ($ribbon"1|0|1|*>1") THEN
   DEFINE SYMBOL  qualifiers = ($qualifiers)/KEY
ELSE
   DEFINE SYMBOL  qualifiers = ($qualifiers)/NOKEY
ENDIF

DEFINE SYMBOL qualifiers = ($qualifiers)/LEVELS=($ferret_fill_levels"v")

IF ($ribbon"0|*>1") THEN
   DEFINE SYMBOL  plot_command = PLOT/VS/RIBBON/LINE($qualifiers)
   IF `nout_lonlat LT 50000` THEN DEFINE SYMBOL  plot_command = ($plot_command)/THICK
ENDIF
LET prof_id = _m[ge=($rowvar)]

LET rowsum = `($rowvar)[m=@sum]`
LET row_expand = EXPND_BY_LEN(XSEQUENCE(prof_id), XSEQUENCE(($rowvar)), rowsum)
LET new1 = IF MISSING(row_expand,-100) EQ -100 then 1 
LOAD row_expand

DEFINE SYMBOL  nprofiles = `($rowvar),return=msize`

! newrow is 1 at the start of each new profile

LET ib = row_expand[i=@ddb]
LET new1 = missing(ib,1)
LET newrow = if new1 ne 0 then 1

LET nk = `($data_z_var),return=isize` + `($rowvar)[m=@ngd]`
DEFINE SYMBOL  nk = `nk`


! set up masks

! Variables for the waterfall plots

LET/TITLE="`($data_var),RETURN=title`" varplot = EXPNDI_BY(XSEQUENCE(($data_var)), XSEQUENCE(newrow), ($nk))
LET/TITLE="Latitude"/UNITS="degrees_north" latplot = EXPNDI_BY(XSEQUENCE(($data_y_var)), XSEQUENCE(newrow), ($nk))
LET/TITLE="Longitude"/UNITS="degrees_east"  lonplot = EXPNDI_BY(XSEQUENCE(($data_x_var)), XSEQUENCE(newrow), ($nk))
LET/TITLE="Time"/UNITS="`($data_t_var),return=units`"  timplot = EXPNDI_BY(XSEQUENCE(($data_t_var)), XSEQUENCE(newrow), ($nk))
LET/TITLE="Depth"/UNITS="m"  zplot = EXPNDI_BY(($data_z_var), newrow, ($nk))

LET/TITLE="Depth"/UNITS="m"  issurf = EXPNDI_BY(XSEQUENCE(newrow), XSEQUENCE(newrow), ($nk))  ! Surface locations

LET ntic = 10
PPL %range ($region_z_lo),  ($region_z_hi), `ntic`
LET dlo = ($ppl$range_low)
LET dhi = ($ppl$range_high)


DEFINE VIEWPORT/XLIM=0:1/YLIM=0:1 vfull1
DEFINE VIEWPORT/XLIM=0:1/YLIM=0:1 vfull2

DEFINE SYMBOL view1 = vfull1
DEFINE SYMBOL view2 = vfull2

! Get units and origin for time variable

let tunits = "`($data_t_var),return=units`"
let sstring = `strindex(tunits, "since")` - 2
let time_units = substring(tunits, 1, `sstring`)
let slen = strlen(tunits)
let time_origin = substring(tunits, sstring+8, slen-sstring)

IF ($original_time_var"0|*>1") THEN
   LET attnames = ($original_time_var).attnames
   IF `IS_ELEMENT_OF_STR_N (attnames, "time_origin") GT 0` THEN \
    LET time_origin = "`($original_time_var).time_origin`"
ENDIF

LET amin = time[i=@min]
LET amax = time[i=@max]

GO LAS_is_range amin amax
CANCEL SYMBOL is_time

! Adjust if time too close together
let oneday = 1
IF `STRINDEX(time_units, "sec") GT 0` THEN LET oneday = 24*60*60
IF `STRINDEX(time_units, "min") GT 0` THEN LET oneday = 24*60
IF `STRINDEX(time_units, "ho") GT 0` THEN LET oneday = 24
IF `STRINDEX(time_units, "da") GT 0` THEN LET oneday = 1 

IF `ax_lo-ax_hi LT oneday/2` THEN
   IF `ax_lo GT 0` THEN 
      LET ax_lo = `ax_lo - oneday`
      LET ax_hi = `ax_hi + oneday`
   ELSE
      LET ax_lo = `ax_lo + oneday`
      LET ax_hi = `ax_hi - oneday`
   ENDIF   
ENDIF
DEFINE AXIS/t=`ax_lo`:`ax_hi`/npoints=1000/units=`time_units`/t0="`time_origin`" haxis 

LET xlo = ax_lo
LET xhi = ax_hi

DEFINE AXIS/z=`dlo`:`dhi`/depth/npoints=100 vaxis
DEFINE SYMBOL vunits= `($data_z_var),return=units`AAA
IF `STRCMP("($vunits)", "AAA")` THEN SET AXIS/UNITS=`($data_z_var),return=units` vaxis


! Make a blank plot with the correct time axis on the horizal and depth
! axis on the vertical.

DEFINE SYMBOL insitu_blankvar = blankvar
LET blankvar = 100+t[gt=haxis] + z[gz=vaxis]
SHADE/PAL=white/NOLAB/NOKEY/LEV=(0,1,1) blankvar
ANNOTATE/norm/xpos=-0.05/ypos=0.5/angle=90/halign=0/siz=0.12 "`($data_z_var),return=units`"

LET zmm = MINMAX(zplot)
IF `zmm[i=1] GT zmm[i=2]` THEN
   LET zplotvar = -1*zplot
ELSE
   LET zplotvar = zplot
ENDIF

!Now make the ribbon plot.


DEFINE SYMBOL qualifiers = ($qualifiers)/noaxes

! First plot sets up plot symbols. The reset_labels and color-key labeled by dates
! expect the color plot to be an overlay.

! For LAS_results:
DEFINE SYMBOL AX_VERT_POSTV = down

IF ($ribbon"0|0|1|*>1") THEN
   PLOT/OVER/VS/SYM=dot/NOKEY/NOLAB/noaxes timplot, zplotvar
   PLOT/OVER/VS/OVER/RIBBON/LINE/MISS=blank/SYM=19/THICK($qualifiers)/SET timplot, zplotvar, varplot
      IF ($ferret_annotations%0|*>1%) THEN GO reset_labels
   PPL RIBBON/OVER
ELSE

! To make wiggly waterfall plots

   define axis/x=-180:360:180/units=degrees xfull
   define axis/y=90s:90n:90/units=degrees yfull
   define axis/z=0:10000:5000/depth zfull

! valmid - a "nice" value roughly mid-range of the "surface" values
   DEFINE SYMBOL   nvals `($data_var)[i=@ngd]`
   IF `($nvals) EQ 0` THEN
     DEFINE SYMBOL  valmin 0.0
     DEFINE SYMBOL  valmax 0.0
     DEFINE SYMBOL  valmid 0.0
   ELSE  
     DEFINE SYMBOL  valmin `($data_var)[i=@min]`
     DEFINE SYMBOL  valmax `($data_var)[i=@max]`
     LET vsurf = varplot * issurf
     PPL %RANGE,`vsurf[i=@min]`,`vsurf[i=@max]`,5  ! range of "surface" values
     DEFINE SYMBOL ninc `(($ppl$range_high) - ($ppl$range_low))/($ppl$range_inc)`
     DEFINE SYMBOL  valmid `($ppl$range_low) + INT(($ninc)/2)*($ppl$range_inc)`
   ENDIF
   DEFINE SYMBOL  valrange `($valmax) - ($valmin)`   ! full range
   
! decide on a range to use for the length key
   ppl %RANGE,($valmin),($valmax),10
   DEFINE SYMBOL  scale_min ($ppl$range_low)
   DEFINE SYMBOL  scale_max ($ppl$range_high)
   
   IF `($valrange) EQ 0` THEN
     DEFINE SYMBOL  wscale `0.1 * (xhi - xlo)`
   ELSE
     DEFINE SYMBOL  wscale `0.1 * (xhi - xlo)/($valrange)`
   ENDIF
   
! draw a blank,labelled rectangle - allow room for waterfalls at edges
   DEFINE SYMBOL wleft  `($wscale)*(($valmid) - ($valmin))`
   DEFINE SYMBOL wright `($wscale)*(($valmax) - ($valmid))`
   
   FILL/VLIM=0:`dhi`/HLIM=`xlo`:`xhi`/NOKEY/NOLAB/LEV=(-100,-99,1) 0*x[gx=xfull]*z[gz=zfull]
   PPL YLAB @ACDepth (meters)
   
! X or Y coordinates of profiles and depths defined above, lonplot, latplot, zplot. 
! Values are varplot the values
   
! plot the waterfalls, if any
   IF `($nvals) EQ 0` THEN
      LABEL/NOUSER `(ppl$xlen)/2`,`(ppl$ylen)/2`,0,0,.25 @ACNo Valid Data
   ELSE
   ! ... vertical profile markers
      PLOT/VS/LINE/color=black/OVER/NOLAB/i=1:($nk) lonplot, zplot
   ! ... profile data
      IF `($nvals)/($nprofiles) GT 50` THEN
!          PLOT/VS/LINE/COLOR=red/OVER/NOLAB/i=1:($nk) lonplot + ($wscale)*(varplot - ($valmid)), zplot
          RIBBON/VS/LINE/palette=($ferret_palette"red")/OVER/NOLAB/i=1:($nk) lonplot + ($wscale)*(varplot - ($valmid)), zplot, zplot
      ELSE
!          PLOT/VS/LINE/COLOR=red/SYM=1/OVER/NOLAB/i=1:($nk) lonplot + ($wscale)*(varplot - ($valmid)), zplot
          RIBBON/VS/LINE/SYM=1/palette=($ferret_palette"red")/OVER/NOLAB/i=1:($nk) lonplot + ($wscale)*(varplot - ($valmid)), zplot, zplot
      ENDIF
   ! ... scale indicator
      DEFINE SYMBOL  xmidsc (`(xhi + xlo)/2`)
      DEFINE SYMBOL  xlosc `($xmidsc) - ($wscale)*(($valmid) - ($scale_min))`
      DEFINE SYMBOL  xhisc `($xmidsc) + ($wscale)*(($scale_max) - ($valmid))`
      DEFINE SYMBOL  zmidsc `dhi/2`
      DEFINE SYMBOL  zlen `dhi/50`
      DEFINE SYMBOL  zlosc `($zmidsc) - ($zlen)/2`
      DEFINE SYMBOL  zhisc `($zmidsc) + ($zlen)/2`
      PLOT/VS/LINE/COLOR=blue/THICK=2/OVER/NOLAB {($xlosc),($xlosc),($xlosc),($xhisc),($xhisc),($xhisc)},{($zlosc),($zhisc),($zmidsc),($zmidsc),($zlosc),($zhisc)}
   ENDIF

ENDIF  ! NOT ribbon

! Add any constraint labels as annotation notes.

DEFINE SYMBOL longitude_lab = Longitude: ($region_x_lo):($region_x_hi)
DEFINE SYMBOL time_lab = Time ($region_t_lo):($region_t_hi)

IF `($ferret_annotations%0|*>1%)` THEN

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL  nmask_labels = 1

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL  mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
         DEFINE SYMBOL  note_num = `($note_num"0") + 1`; \
         DEFINE SYMBOL  note_($note_num)_lab = ($mask_title_($mmask)); \
      ENDIF)
ELSE

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL  nmask_labels = 1
   DEFINE SYMBOL  label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   DEFINE SYMBOL  label_x = `-0.95*($ppl$xorg)`
   DEFINE SYMBOL  label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL  mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
        LABEL/NOUSER `($label_x)`, `($label_y)`, -1, 0, 0.12, ($mask_title_($mmask)) ; \
        DEFINE SYMBOL  label_y = `($label_y) - 0.2`; \
      ENDIF)
ENDIF

! Add cruise information on the top
GO feature_labels

! if constraints are shown via constraint_0_lhs etc, define labels for those
GO set_constraint_labels

! restore key-annotation setting: keys not annotated
KEYMARK 0

! Save the results

GO LAS_results box

! End of file ------------insitu_waterfall_zt.jnl--------------------------
