! LAS_set_strides_curvilinear.jnl
!
! From the region and the grid we can define striding. When there's going to be
! a transformation or something, then this might be better someplace else, or
! might be undone by the transform script.

! When native striding is used for curvilinear data, be sure the range
! of index values requested wont go beyond the index range of the grid.

! 1/18 Fixes for over-limiting the index range for strided curvilienar grids

IF `($ferret_subsample_t"1|0|1|true>1|false>0|*>1") EQ 0 AND ($ferret_view"|t>1|T>1|*>0")` THEN EXIT/SCRIPT

! If we are computing auto-levels for an animation, striding is done in that script. 
! no need for it here.

IF ($its_autolev_animate"0|*>1") THEN EXIT/SCRIPT

! cannot do native striding if this is a descriptor dataset. 

IF ($data_var_only"0|*>1") THEN 
   DEFINE SYMBOL check_for_des =  `($data_var_only)[d=($data_num)],RETURN=dsetpath`
ELSE
   DEFINE SYMBOL check_for_des =  `($data_var)[d=($data_num)],RETURN=dsetpath`
ENDIF

IF `STRINDEX("($check_for_des)", ".des") GT 0` THEN EXIT/SCRIPT

IF `STRINDEX( "($operation_ID)", "Plot" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "zoom" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "prop" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "Anim" ) EQ 0 AND \
STRINDEX( "($operation_ID)", "Grid_for_GE" ) EQ 0` THEN EXIT/SCRIPT

! If striding has already been set (e.g. for the other vector component) then exit
IF `($xstride"0|1>0|*>1") + ($ystride"0|1>0|*>1") + ($zstride"0|1>0|*>1") + ($tstride"0|1>0|*>1") GT 0` THEN EXIT/SCRIPT

LET maxpix = 600  ! default
IF ($ferret_size"0|0.06667>1|*>0") THEN LET maxpix = 300  ! small
IF ($ferret_size"0|0.25>1|*>0")    THEN LET maxpix = 500  ! medium
IF ($ferret_size"0|0.5>1|*>0")     THEN LET maxpix = 600  ! default
IF ($ferret_size"0|0.8333>1|*>0")  THEN LET maxpix = 700  ! large

IF `($ferret_google_plot"0|*>1")` THEN 
    IF ($ferret_stride_quality_factor"0|1.0>1|*>0") THEN LET maxpix = 200  ! draft(fast)
    IF ($ferret_stride_quality_factor"0|0.5>1|*>0") THEN LET maxpix = 500  ! medium
    IF ($ferret_stride_quality_factor"0|0.0>1|*>0") THEN LET maxpix = 700  ! best(slow)
!LET  maxpix = `2*maxpix`
ENDIF

! Step 1  ---------------------------------------------------------------------
! Determine striding based on the memory allocation

DEFINE SYMBOL memsize = ($FERRET_MEMORY"6.4")* 1.e6

! If ($data_count) larger than 1 add the size of the variables.
!LET pvar = ($ferret_plot_var) 
LET pvar = ($expr1)($data_var)[d=($data_num)]($expr2)
IF ($region_zt"0|*>1") THEN LET pvar = ($expr1)($data_var)[d=($data_num),($region_zt)]($expr2)
IF ($clon_imin"0|*>1") THEN 
   LET pvar = ($expr1)($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]($expr2)
   IF ($region_zt"0|*>1") THEN \
      LET pvar = ($expr1)($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax),($region_zt)]($expr2)
   IF ($ferret_season_length"0|*>1") THEN
      LET pvar = ($expr1)S($num)_the_plot_var_zt[i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]($expr2)

   ENDIF
ENDIF

! Compute strides_for_mem as in LAS_set_strides.jnl

IF `($num"0")+1 EQ ($data_count)` THEN
   LET ndims = 0
   LET xsiz = `pvar,RETURN=isize`
   IF `xsiz GT 1` THEN LET ndims = `ndims + 1`
   LET ysiz = `pvar,RETURN=jsize`
   IF `ysiz GT 1` THEN LET ndims = `ndims + 1`
   LET zsiz = `pvar,RETURN=ksize`
   IF `zsiz GT 1` THEN LET ndims = `ndims + 1`
   LET tsiz = `pvar,RETURN=lsize`
   IF `tsiz GT 1` THEN LET ndims = `ndims + 1`

   LET varsiz = xsiz* ysiz* zsiz* tsiz
   DEFINE SYMBOL stride_for_mem = `INT( 1+ varsiz/(.1*($memsize)) )`
   IF `ndims EQ 2` THEN DEFINE SYMBOL stride_for_mem = `INT(($stride_for_mem)^0.5)`
   IF `ndims EQ 3` THEN DEFINE SYMBOL stride_for_mem = `INT(($stride_for_mem)^0.33)`
   IF `ndims EQ 4` THEN DEFINE SYMBOL stride_for_mem = `INT(($stride_for_mem)^0.25)`

ENDIF

! If not a graphics product, apply the strides

IF `STRINDEX( "($operation_ID)", "Plot" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "zoom" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "prop" ) EQ 0 AND \
    STRINDEX( "($operation_ID)", "Anim" ) EQ 0 AND  \
    STRINDEX( "($operation_ID)", "_GE" ) EQ 0` THEN
   IF `($stride_for_mem"0") GT 1` THEN
      IF `($region_x_range"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=xaxis`
	 LET x_strided_var = pvar
         DEFINE SYMBOL add_to_title = Stride ($stride_for_mem) in X
      ENDIF
      IF `($region_y_range"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=yaxis`
	 LET y_strided_var = pvar
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in Y
      ENDIF
      IF `($region_z_range"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=zaxis`
	 LET z_strided_var = pvar
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in Z
      ENDIF
      IF `($region_t"0|*>1") GT 0` THEN 
         SET AXIS/STRIDE=($stride_for_mem) `pvar,RETURN=taxis`
	 LET t_strided_var = pvar
         DEFINE SYMBOL add_to_title = ($add_to_title) Stride ($stride_for_mem) in T
      ENDIF
      SET VAR/TITLE="($ferret_plot_title) ($add_to_title)" ($ferret_plot_var) 

   ENDIF
   EXIT/SCRIPT
ENDIF

! Step 2  ---------------------------------------------------------------------
! Now for graphics products, do striding by pixel size, often larger stride than
! needed to fit in Ferret memory

LET nx = 1
IF ($clon_imin"0|*>1") THEN
   LET nx = ($clon_imax) - ($clon_imin) + 1
ELSE
   LET xx = x[gx=($data_var)[d=($data_num)]]
   LET nx = xx[i=@ngd]
ENDIF

LET nx_orig = `nx`


! lon and lat max were computed in finding the bbox
DEFINE SYMBOL grid_x_range = `($ferret_curv_lon_max) - ($ferret_curv_lon_min)`
DEFINE SYMBOL grid_y_range = `($ferret_curv_lat_max) - ($ferret_curv_lat_min)`

! For 2D plots

IF `STRLEN("($ferret_view)") EQ 2` THEN

! curvilinear grid? Get percentage of total that the region represents, see
! if the number of points looks like it will be large.


      LET ii = i[gx=($data_var)[d=($data_num)]]
      LET nx = ($clon_imax) - ($clon_imin) + 1
      let ixmax = ii[i=@max]

      LET jj = j[gy=($data_var)[d=($data_num)]]
      LET ny = ($clat_jmax) - ($clat_jmin) + 1
      let jymax = jj[j=@max]

! Curvilinear and XY plot

   IF `($ferret_curvi_coord_lat"0|*>1") + ($ferret_view"|xy>1|*>0") EQ 2 ` THEN 

      LET x_pct = ($region_x_range)/($grid_x_range)
      LET pixsize = `nx*x_pct`

      IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `2*INT((pixsize/maxpix)+1)`

      DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`
      IF `($xstride"0") GT 1` THEN 

         LET rem = ( (($clon_imin)/($xstride)) - int(($clon_imin)/($xstride)) )* ($xstride)
         DEFINE SYMBOL xoff = /OFFSET=`INT(($xstride) - rem)`
         IF `rem EQ 0` THEN CANCEL SYMBOL xoff 
         IF `($clon_imin) EQ 1` THEN CANCEL SYMBOL xoff 

         SET AXIS/STRIDE=($xstride)($xoff) `($data_var)[d=($data_num)],RETURN=xaxis`
	 LET x_strided_var = ($data_var)[d=($data_num)]
         DEFINE SYMBOL clon_imin = `MAX(1, INT(($clon_imin)/($xstride)) )`
         DEFINE SYMBOL clon_imax = `MIN (ixmax, INT(($clon_imax)/($xstride)) )`
!	 IF `(($clon_imin) + ($clon_imax)*($xstride)) GT ixmax` THEN \
!	    DEFINE SYMBOL clon_imax = `($clon_imax)-($xstride)`
         IF `($clon_imax) GT ixmax` THEN DEFINE SYMBOL clon_imax = `ixmax`
      ENDIF

! Use /HLIM and /VLIM to define the plot rectangle. If this is a native
! curvilienar plot this step is done elsewhere.

      IF `($native_curvilinear_xy"0|*>1") EQ 0` THEN \
        DEFINE SYMBOL qualifiers = ($qualifiers)/HLIM=`($region_x_lo)`:`($region_x_hi)`

      LET y_pct = ($region_y_range)/($grid_y_range)
      LET pixsize = `ny*y_pct`

      IF `2*pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`

      IF `($ystride"0") GT 1` THEN 
         LET rem = ( (($clat_jmin)/($ystride)) - int(($clat_jmin)/($ystride)) )* ($ystride)
         DEFINE SYMBOL yoff = /OFFSET=`INT(($ystride) - rem)`
         IF `rem EQ 0` THEN CANCEL SYMBOL yoff 
         SET AXIS/STRIDE=($ystride)($yoff) `($data_var)[d=($data_num)],RETURN=yaxis`
	 LET y_strided_var = ($data_var)[d=($data_num)]
         DEFINE SYMBOL clat_jmin = `MAX(1, INT(($clat_jmin)/($ystride)) )`
         DEFINE SYMBOL clat_jmax = `MIN(jymax, INT(($clat_jmax)/($ystride)) )`
!	 IF `(($clat_jmin) + ($clat_jmax)*($ystride)) GT jymax` THEN \
!	    DEFINE SYMBOL clat_jmax = `($clat_jmax)-($ystride)`
         IF `($clat_jmax) GT jymax` THEN DEFINE SYMBOL clat_jmax = `jymax`

      ENDIF

! Curvilinear and some other view than xy

   ELIF `($ferret_curvi_coord_lat"0|*>1") AND (STRINDEX("($ferret_view)", "x") + STRINDEX("($ferret_view)", "y") GT 0) ` THEN

        IF `(STRINDEX("($ferret_view)", "x") GT 0) OR (($clon_imax) - ($clon_imin)) GT 0` THEN 
           LET x_pct = ($region_x_range)/($grid_x_range)
           LET pixsize = `nx*x_pct`
    
           IF `pixsize GT maxpix` THEN 
              DEFINE SYMBOL xstride = `INT((pixsize/maxpix)+1)`
           ENDIF
	   DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`

           IF `($xstride"0") GT 1` THEN 
           
! Check whether X axis is modulo. check_modulo_factor.jnl checks whether the
! axis is modulo and if so, whether the stride is a factor of the lentgh of 
! the axis, resetting it if possible to retain the modulo character of the axis.

              GO check_modulo_factor x 
              LET rem = ( (($clon_imin)/($xstride)) - int(($clon_imin)/($xstride)) )* ($xstride)
              DEFINE SYMBOL xoff = /OFFSET=`($xstride) - rem`
              IF `rem EQ 0` THEN CANCEL SYMBOL xoff 
              SET AXIS/STRIDE=($xstride)($xoff) `($data_var)[d=($data_num)],RETURN=xaxis`
	      LET x_strided_var = ($data_var)[d=($data_num)]
              DEFINE SYMBOL clon_imin = `INT(($clon_imin)/($xstride))`
              DEFINE SYMBOL clon_imax = `INT(($clon_imax)/($xstride))`
!	      IF `(($clon_imin) + rem + ($clon_imax)*($xstride)) GT ixmax` THEN \
!	         DEFINE SYMBOL clon_imax = `($clon_imax)-($xstride)`
		 
	      IF `($clon_imax) GT ixmax` THEN DEFINE SYMBOL clon_imax = `ixmax`
           ENDIF

        ENDIF

        IF `(STRINDEX("($ferret_view)", "y") GT 0) OR (($clat_jmax) - ($clat_jmin)) GT 0` THEN 
           LET y_pct = ($region_y_range)/($grid_y_range)
           LET pixsize = `ny*y_pct`
  
           IF `pixsize GT maxpix` THEN 
              DEFINE SYMBOL ystride = `INT((pixsize/maxpix)+1)`
           ENDIF
	   DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`

           IF `($ystride"0") GT 1` THEN 
              LET rem = ( (($clat_jmin)/($ystride)) - int(($clat_jmin)/($ystride)) )* ($ystride)
              DEFINE SYMBOL yoff = /OFFSET=`($ystride) - rem`
              IF `rem EQ 0` THEN CANCEL SYMBOL yoff 
              SET AXIS/STRIDE=($ystride)($yoff) `($data_var)[d=($data_num)],RETURN=yaxis`
	      LET y_strided_var = ($data_var)[d=($data_num)]
              DEFINE SYMBOL clat_jmin = `INT(($clat_jmin)/($ystride))`
              DEFINE SYMBOL clat_jmax = `INT(($clat_jmax)/($ystride))`
!	      IF `(($clat_jmin) + rem + ($clat_jmax)*($ystride)) GT ny` THEN \
!	         DEFINE SYMBOL clat_jmax = `($clat_jmax)-($ystride)`
              IF `($clat_jmax) GT jymax` THEN DEFINE SYMBOL clat_jmax = `jymax`
    
           ENDIF

        ENDIF

        IF ($region_z_lo"0|*>1") THEN 
           LET zz = z[gz=($data_var)[d=($data_num)],($region_z)]
           LET nz = zz[k=@ngd]
           LET pixsize = `MAX(pixsize, nz)`

           IF `nz GT maxpix` THEN 
              DEFINE SYMBOL zstride = `INT((pixsize/maxpix)+1)`
              DEFINE SYMBOL zstride = `MAX(($zstride"1"), ($stride_for_mem"1"))`
           ENDIF
           IF `($zstride"0") GT 1` THEN SET AXIS/STRIDE=($zstride) `($data_var)[d=($data_num)],RETURN=zaxis`
	   LET z_strided_var = ($data_var)[d=($data_num)]

        ENDIF
   
        IF `($region_t_lo"0|*>1") AND STRINDEX("($operation_ID)", "Animation_Frames") EQ 0 `  THEN     
           LET tt = t[gt=($data_var)[d=($data_num)],($region_t)]
           LET nt = `tt[l=@ngd]`
           stat tt
           LET pixsize = `MAX(pixsize, nt)`

           IF `nt GT maxpix` THEN 
              DEFINE SYMBOL tstride = `INT((pixsize/maxpix)+1)`
              DEFINE SYMBOL tstride = `MAX(($tstride"1"), ($stride_for_mem"1"))`
           ENDIF
           IF `($tstride"0") GT 1` THEN SET AXIS/STRIDE=($tstride) `($data_var)[d=($data_num)],RETURN=taxis`
	   LET t_strided_var = ($data_var)[d=($data_num)]

        ENDIF

   ENDIF ! xy or not
ENDIF  ! 2D plots

! XY and a third dimension for Google Earth placemarks

IF `STRLEN("($ferret_view)") EQ 3 AND STRINDEX("($ferret_view)", "xy") GT 0` THEN

! curvilinear grid? Get percentage of total that the region represents, see
! if the number of points looks like it will be large.

! Curvilinear and XY plot

   IF `($ferret_curvi_coord_lat"0|*>1")` THEN 

      LET x_pct = ($region_x_range)/($grid_x_range)
      LET pixsize = `nx*x_pct`
      IF `pixsize GT maxpix` THEN DEFINE SYMBOL xstride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL xstride = `MAX(($xstride"1"), ($stride_for_mem"1"))`
      IF `($xstride"0") GT 1` THEN 
         LET rem = ( (($clon_imin)/($xstride)) - int(($clon_imin)/($xstride)) )* ($xstride)
         DEFINE SYMBOL xoff = /OFFSET=`($xstride) - rem`
         IF `rem EQ 0` THEN CANCEL SYMBOL xoff 
         SET AXIS/STRIDE=($xstride)($xoff) `($data_var)[d=($data_num)],RETURN=xaxis`
	 LET x_strided_var = ($data_var)[d=($data_num)]
         DEFINE SYMBOL clon_imin = `INT(($clon_imin)/($xstride))`
         IF `($clon_imin) EQ 0` THEN DEFINE SYMBOL clon_imin = 1
         DEFINE SYMBOL clon_imax = `INT(($clon_imax)/($xstride))`
         IF `($clon_imax) EQ 0` THEN DEFINE SYMBOL clon_imax = 2
      ENDIF

      LET yy = y[gy=($data_var)[d=($data_num)]]
      LET ny = yy[j=@ngd]
      LET y_pct = ($region_y_range)/($grid_y_range)
      LET pixsize = `ny*y_pct`

      IF `2*pixsize GT maxpix` THEN DEFINE SYMBOL ystride = `2*INT((pixsize/maxpix)+1)`
      DEFINE SYMBOL ystride = `MAX(($ystride"1"), ($stride_for_mem"1"))`

      IF `($ystride"0") GT 1` THEN 
         LET rem = ( (($clat_jmin)/($ystride)) - int(($clat_jmin)/($ystride)) )* ($ystride)
         DEFINE SYMBOL yoff = /OFFSET=`($ystride) - rem`
         IF `rem EQ 0` THEN CANCEL SYMBOL yoff 
         SET AXIS/STRIDE=($ystride)($yoff) `($data_var)[d=($data_num)],RETURN=yaxis`
	 LET y_strided_var = ($data_var)[d=($data_num)]
         DEFINE SYMBOL clat_jmin = `MAX(1, INT(($clat_jmin)/($ystride)) )`
         IF `($clat_jmin) EQ 0` THEN DEFINE SYMBOL clat_jmin = 1
         DEFINE SYMBOL clat_jmax = `MIN(ny, INT(($clat_jmax)/($ystride)) )`
         IF `($clat_jmax) EQ 0` THEN DEFINE SYMBOL clat_jmax = 2
      ENDIF

   ENDIF  ! ferret_curvi_coord_lat
ENDIF ! GE placemarks


! If long/lat index ranges were redefined, and if its a comparision
! then we need to redefine ferret_plot_base_var_0

IF `($num) GT 0 and (($xstride"0|1>0|*")+($ystride"0|1>0|*") GT 0)` THEN
   DEFINE SYMBOL brkt_loc = `STRLEN("($ferret_plot_var_0_noregion)") - 1` 
   IF ($region_0_zt"0|*>1") THEN 
      DEFINE SYMBOL ferret_plot_base_var_0 = `SUBSTRING("($ferret_plot_var_0_noregion)", 1, ($brkt_loc))`\
,($region_0_zt),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   ELSE
      DEFINE SYMBOL ferret_plot_base_var_0 = `SUBSTRING("($ferret_plot_var_0_noregion)", 1, ($brkt_loc))`\
,i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]
   ENDIF
ENDIF

! Add a label about the striding at the upper left.

LET need_comma = 0
IF `($xstride"0|1>0|*>1") + ($ystride"0|1>0|*>1") + ($zstride"0|1>0|*>1") + ($tstride"0|1>0|*>1") GT 0` THEN

   DEFINE SYMBOL n_left_labels = `($n_left_labels"0|*>1")+1`
   DEFINE SYMBOL upper_left_($n_left_labels) = Subsampled 

   IF `($xstride"0|1>0|*>1")` THEN 
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($xstride) in X
      LET need_comma = 1
   ENDIF

   IF `($ystride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($ystride) in Y
      LET need_comma = 1
   ENDIF

   IF `($zstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($zstride) in Z
      LET need_comma = 1
   ENDIF

   IF `($tstride"0|1>0|*>1")` THEN 
      IF `need_comma GT 0` THEN DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)),  
      DEFINE SYMBOL upper_left_($n_left_labels) =\
         ($upper_left_($n_left_labels)) ($tstride) in T
      LET need_comma = 1
   ENDIF

   DEFINE SYMBOL note_num = `($note_num"0") + 1`
   DEFINE SYMBOL note_($note_num)_lab = ($upper_left_($n_left_labels))

ENDIF

! Redefine pvar using new longitude and latitude indices. 
! They may have been reset after defining striding.

IF ($clon_imin"0|*>1") THEN 
   LET pvar = ($expr1)($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]($expr2)
   IF ($region_zt"0|*>1") THEN \
      LET pvar = ($expr1)($data_var)[d=($data_num),i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax),($region_zt)]($expr2)
   IF ($ferret_season_length"0|*>1") THEN
      LET pvar = ($expr1)S($num)_the_plot_var_zt[i=($clon_imin):($clon_imax),j=($clat_jmin):($clat_jmax)]($expr2)

   ENDIF
ENDIF

! End of $RCSfile ------------LAS_set_strides_curvilinear.jnl--------------------------
