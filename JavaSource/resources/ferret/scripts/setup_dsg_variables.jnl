! setup_dsg_variables.jnl
!
! Redefine data_var, data_x_var, data_y_var
! * Insert gaps between cruises
! * Fix longitudes crossing the dateline.
! See piecewise_linear_decimation.jnl which calls this script 
! and computes piecewise linear decimation
! 8/2016 *acm* If the Ferret property traj_discrete has been set, check 
! whether the distance between points is large; if so plot as discrete 
! points connected with a thin line.
! 4/3/2017 *acm* Additions for point data types

IF `($rowvar"0|*>1") EQ 0` THEN EXIT/SCRIPT

IF `($data_var_in"0|*>1") EQ 0` THEN DEFINE SYMBOL data_var_in = ($data_var)
IF `($data_x_var_in"0|*>1") EQ 0` THEN DEFINE SYMBOL data_x_var_in = ($data_x_var)
IF `($data_y_var_in"0|*>1") EQ 0` THEN DEFINE SYMBOL data_y_var_in = ($data_y_var)
IF `($data_t_var_in"0|*>1") EQ 0` THEN DEFINE SYMBOL data_t_var_in = ($data_t_var)

DEFINE SYMBOL nfeatures = `($rowvar),RETURN=msize`
IF ($feature_type"0|point>1|*>0") THEN DEFINE SYMBOL nfeatures = 0

IF ($nfeatures"0|0|*>1") THEN 
   LET mmax = `($rowvar)[m=1:($nfeatures)@sum]` ! 1st m cruises
   LET npts = mmax
ELSE
   LET npts = `($data_var),RETURN=isize`
ENDIF

! Check data type

LET gettype = ($data_var)
DEFINE SYMBOL vtype = `gettype,RETURN=dtype`
DEFINE SYMBOL is_string = ($vtype"0|CHAR>1|*>0")

! Replace the last datum in each trajectory with the bad-value.
! For the longitudes, also fix the crossings of the dateline.

LET lon_with_gaps = ($data_x_var)
LET lat_with_gaps = ($data_y_var)
LET time_with_gaps = ($data_t_var)
LET var_with_gaps = ($data_var)

IF `($data_count) GT 1` THEN LET var_1_with_gaps = ($data_1_var)
IF `($data_count) GT 2` THEN LET var_2_with_gaps = ($data_2_var)
IF `($data_count) GT 3` THEN LET var_3_with_gaps = ($data_3_var)
IF `($data_count) GT 4` THEN LET var_4_with_gaps = ($data_4_var)
IF `($data_count) GT 5` THEN LET var_5_with_gaps = ($data_5_var)
   
LET varnames = ..varnames
IF `IS_ELEMENT_OF_STR(varnames, "time") GT 0` THEN set att/like=time time_with_gaps

IF ($data_z_var"0|*>1") THEN LET vert_with_gaps = ($data_z_var)

IF ($feature_type"0|point>1|*>0") THEN EXIT/SCRIPT

! Function separate puts gaps between cruises and also removes jumps in longitude
! where it crosses the dateline. Set ngood and nbad before adding these gaps.
! Prop-prop plots compute ngood elsewhere, taking into account constraints.

IF `($its_prop_plot"0|0|1|*>1") EQ 0` THEN
   IF `($is_string"0") NE 1` THEN 
      STAT ($data_var)
      DEFINE SYMBOL ngood_data = ($stat_ngood)
      DEFINE SYMBOL nbad_data = ($stat_nbad)
   ELSE
      DEFINE SYMBOL zshape = `($data_var),RETURN=shape`
      IF `($zshape"0|E>1|POINT>1|*>0)` THEN
         DEFINE SYMBOL ngood_data = `($data_var),return=size`
         DEFINE SYMBOL nbad_data = 0
      ELSE
         DEFINE SYMBOL ngood_data = `($data_var)[i=@ngd]`
         DEFINE SYMBOL nbad_data = `($numobs) - ($ngood_data)`
      ENDIF
   ENDIF
ENDIF

DEFINE SYMBOL n_gaps = `($nfeatures) - 1`

IF ($data_x_is_lon"0|*>1") THEN
   LET/units="`($data_x_var),return=units` "/title="`($data_x_var),return=title`" lon_with_gaps = SEPARATE(($data_x_var)[i=1:`npts`], ($rowvar), 1)
ELSE
   LET/units="`($data_x_var),return=units` "/title="`($data_x_var),return=title`" lon_with_gaps = SEPARATE(($data_x_var)[i=1:`npts`], ($rowvar), 0)
ENDIF

LET/units="`($data_y_var),return=units` "/title="`($data_y_var),return=title`" lat_with_gaps = SEPARATE(($data_y_var)[i=1:`npts`], ($rowvar), 0)   

LET/units="`($data_t_var),return=units` "/title="`($data_t_var),return=title`" time_with_gaps = SEPARATE(($data_t_var)[i=1:`npts`], ($rowvar), 0)

IF ($data_z_var"0|*>1") THEN \
 LET/units="`($data_z_var),return=units` "/title="`($data_z_var),return=title`" vert_with_gaps = SEPARATE(($data_z_var)[i=1:`npts`], ($rowvar), 0)


LET/units="`($data_var),return=units`" var_with_gaps = SEPARATE(($data_var)[i=1:`npts`], ($rowvar), 0)   
IF ($is_string) THEN LET/units="`($data_var),return=units` "/title="`($data_var),return=title`" var_with_gaps = SEPARATE_STR(($data_var)[i=1:`npts`], ($rowvar), 0)

IF `($data_count) GT 1` THEN 
   LET/units="`($data_1_var),return=units`" var_1_with_gaps = SEPARATE(($data_1_var)[i=1:`npts`], ($rowvar), 0)   
   DEFINE SYMBOL data_var_1 = var_1_with_gaps
ENDIF

IF `($data_count) GT 2` THEN 
   LET/units="`($data_2_var),return=units`" var_2_with_gaps = SEPARATE(($data_2_var)[i=1:`npts`], ($rowvar), 0)   
   DEFINE SYMBOL data_var_2 = var_2_with_gaps
ENDIF

IF `($data_count) GT 3` THEN 
   LET/units="`($data_3_var),return=units`" var_3_with_gaps = SEPARATE(($data_3_var)[i=1:`npts`], ($rowvar), 0)   
   DEFINE SYMBOL data_var_3 = var_3_with_gaps
ENDIF

IF `($data_count) GT 4` THEN 
   LET/units="`($data_4_var),return=units`" var_4_with_gaps = SEPARATE(($data_4_var)[i=1:`npts`], ($rowvar), 0)   
   DEFINE SYMBOL data_var_4 = var_4_with_gaps
ENDIF

IF `($data_count) GT 5` THEN 
   LET/units="`($data_5_var),return=units`" var_5_with_gaps = SEPARATE(($data_5_var)[i=1:`npts`], ($rowvar), 0)   
   DEFINE SYMBOL data_var_5 = var_5_with_gaps
ENDIF

! keep original attributes (e.g. time origin may be needed later)
LET varnames = ..varnames
IF `IS_ELEMENT_OF_STR(varnames, "time") GT 0` THEN set att/like=time time_with_gaps

LET npts = `lat_with_gaps,RETURN=isize`

DEFINE SYMBOL data_var = var_with_gaps
DEFINE SYMBOL data_x_var = lon_with_gaps
DEFINE SYMBOL data_y_var = lat_with_gaps
DEFINE SYMBOL data_t_var = time_with_gaps  ! this was commented out. Why?

IF `IS_ELEMENT_OF_STR_N(varnames, "sample_number") GT 0` THEN
   LET sample_number_gaps = SEPARATE(sample_number[i=1:`npts`], ($rowvar), 0)
   LET gap_var = IF sample_number_gaps[i=@ddf] NE 1 THEN 1 ELSE 0

!!! test code for pick up the pen if a delta-distance
   LET deg2rad = 4*atan(1)/180
   LET cos_corr = COS(deg2rad*(($region_y_hi)+(($region_y_lo)) )/2)
   LET difx = lon_with_gaps[i=@shf:1]-lon_with_gaps
   LET dify = lat_with_gaps[i=@shf:1]-lat_with_gaps
   let distsq = cos_corr* (difx*difx+dify*dify)
   LET gap_var = IF sample_number_gaps[i=@ddf] NE 1 OR distsq GT 100 THEN 1 ELSE 0
!!! end of test code
   DEFINE SYMBOL have_gap_var = 1
ENDIF

IF ($data_z_var"0|*>1") THEN DEFINE SYMBOL data_z_var = vert_with_gaps

! If the Ferret property traj_discrete has been set, check whether the 
! distance between points is large; if so plot as discrete points connected
! with a thin line.

IF ($ferret_traj_discrete"0|*>1") THEN

   go earth_distance  ($region_y_lo),  ($region_x_lo), ($region_y_hi), ($region_x_hi), diagonal 
   define symbol diagonal = `diagonal`

   let lat_2 =  lat_with_gaps[i=@shf:1]
   let lon_2 =  lon_with_gaps[i=@shf:1]

   go earth_distance  lat_with_gaps, lon_with_gaps, lat_2, lon_2, delta_diff

   LET rel_dist =  delta_diff/ ($diagonal)
   LET mask = IF rel_dist GT 0.02 THEN 1

   IF `mask[i=@ngd]/ lon_with_gaps[i=@ngd] GT 0.1` THEN 
      DEFINE SYMBOL thinline = 1
      DEFINE SYMBOL qualifiers ($qualifiers)/SYM=26/SIZ=0.08/THICK=3
   ENDIF

ENDIF ! ferret_traj_discrete

LET nout_lonlat = `($data_var)[i=@ngd]`
DEFINE SYMBOL nout_lonlat = `nout_lonlat` 

! Is the data pre-decimated?  If so set up things for the annotations and exit.

LET global_attnames = ..attnames
IF `IS_ELEMENT_OF_STR(global_attnames, "decimation") GT 0` THEN

   DEFINE SYMBOL decimation_fraction = ($ferret_decimation_fraction"0.03257")
   DEFINE SYMBOL piecewise_decimation = 1
   LET ngood_sampled = `($ngood_data)`
   EXIT/SCRIPT
ENDIF

! End of file ------------ setup_dsg_variables.jnl--------------------------


