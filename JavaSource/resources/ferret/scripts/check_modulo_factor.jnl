! check_modulo_factor.jnl
! Check whether stride is an integer factor of the axis length
! and attempt to reset it if not.

! Argument is axis direction: x or t

DEFINE SYMBOL dir = `UPCASE("$1")`
IF `($($dir)stride) LE 1` THEN EXIT/SCRIPT

DEFINE SYMBOL indx = i
IF `STRCMP("($dir)", "T") EQ 0` THEN  DEFINE SYMBOL indx = l

! Check whether axis is modulo
DEFINE SYMBOL var_mod = "`($data_var)[d=($data_num)],RETURN=($dir)mod` "
IF  `STRCMP (" ", ($var_mod)) EQ 0` THEN CANCEL SYMBOL var_mod

! See if an X axis is subspan modulo - if so we dont have to worry about losing
! modulo property with striding. 
IF ($indx"|i>1|l>0") THEN
   CANCEL MODE LONG_LABEL
   LET xaxlen = `($data_var),RETURN=xend` -  (`($data_var),RETURN=xstart`)
   SET MODE/LAST LONG_LABEL
   IF `xaxlen LT ($var_mod"0")` THEN DEFINE SYMBOL var_mod " "    ! its subspan modulo
ENDIF

IF  `STRCMP (" ", ($var_mod)) EQ 0` THEN
   CANCEL SYMBOL FER_LAST_ERROR

ELSE
! Reset the computed stride if necessary to make sure stride is an integer 
! factor of axis length, else it loses its modulo property 

   LET nn = `($data_var)[d=($data_num)],RETURN=($indx)size`
   LET del = INT(($($dir)stride)/2)
   REPEAT/RANGE=1:`($($dir)stride)+del`/NAME=m \
        (DEFINE SYMBOL mm = `m`; \
	 LET nstride = `($($dir)stride)+($mm)`; IF `MOD(nn,nstride) EQ 0` THEN EXIT/LOOP; \
         LET nstride = `($($dir)stride)-($mm)`; IF `MOD(nn,nstride) EQ 0 AND ($mm) GT 2` THEN EXIT/LOOP; \
         IF `nstride LE ($stride_for_mem"1")` THEN EXIT/LOOP)

! If we found a stride value that is an integer factor of the axis length, 
! redefine the stride value. 

   IF `MOD(nn,nstride) EQ 0` THEN DEFINE SYMBOL ($dir)stride = `nstride`
   IF `MOD(nn,nstride) EQ 0` THEN EXIT/SCRIPT

   DEFINE SYMBOL error_string = "Because of striding (subsampling) on axis of length `nn`, cannot do do modulo operations in ($dir)"

ENDIF

! End of $RCSfile ------------check_modulo_factor.jnl--------------------------


