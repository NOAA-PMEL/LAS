! insitu_pie_xy.jnl
! *sh* 2/01

! Description:  the plotting portion, only, of an XY viz. of in-situ data

! define "dups" to deal with repeated coordinates
! ... dups[l=1] has # of duplicate coords
! ... dups[l=2] has sequence number within duplicate group

define symbol xepsdflt `($region_x_range)/100,p=6`
define symbol yepsdflt `($region_x_range)/100,p=6`
let/quiet dups = SCAT2DDUPS(x_var_data,y_var_data,($xepsdflt),($yepsdflt))
let/quiet ndup = dups[l=1]
let/quiet seq  = dups[l=2]
let/quiet isdup = ndup GT 0
define symbol n2colocate `isdup[i=@sum]`
let/quiet ismdup = ndup GT 1
define symbol n3colocate = `ismdup[i=@sum]`

! define the variables needed for a polymark plot
! ... let symbol size gradually increase as no. of obs gets small
define symbol size_creep_factor `(($ngood_data)+300)/(($ngood_data)+150) - 1`  ! [0,1] range

! Instead base this on the number of profiles. Under ~50 start to increase the size.
define symbol size_creep_factor `(featuresize+100)/(featuresize+50) - 1`  ! [0,1] range

let/quiet sym_size = 0.9 + 1.5*($size_creep_factor)
LET/QUIET PLMdflt_scale = 0.1
LET/QUIET PLMxscale = PLMdflt_scale*((($xaxis_max))-(($xaxis_min)))/($ppl$xlen)
LET/QUIET PLMyscale = PLMdflt_scale*((($yaxis_max))-(($yaxis_min)))/($ppl$ylen)

! define marker shapes
! triangle, split-diamond, or pie for ndup = 0, 1, >1, respectively
! ... simple triangle for single point
LET/QUIET xtriangle = ZSEQUENCE(COS(3.14159/180 * X[X=90:`2*120+90`:120]))
LET/QUIET ytriangle = ZSEQUENCE(SIN(3.14159/180 * X[X=90:`2*120+90`:120]))
! ... split diamond for double point
LET/QUIET xdiamond = IF seq EQ 0 then xdia_left else xdia_right
LET/QUIET ydiamond = IF seq EQ 0 then ydia_left else ydia_right
LET/QUIET xdia_left  =  ZSEQUENCE({-1,0,0})
LET/QUIET xdia_right =  ZSEQUENCE({+1,0,0})
LET/QUIET ydia_left  =  ZSEQUENCE({0,-1,+1})
LET/QUIET ydia_right =  ZSEQUENCE({0,+1,-1})
! ... pie triangles centered an zero
LET/QUIET pie_ang0 = seq/(ndup+1)
LET/QUIET pie_ang1 = (seq+1)/(ndup+1)
let zs0 = ZSEQUENCE({0,1,0})
let zs1 = ZSEQUENCE({0,0,1})
let zang = (pie_ang0 * zs0) + (pie_ang1 * zs1) ! 0,start-angle,end-angle in Z
LET/QUIET ypie_slice = SIN(2*3.14159 * zang)            ! 0,SIN(s-a),SIN(e-a)
LET/QUIET xpie_slice0 = COS(2*3.14159 * zang)
LET/QUIET xpie_slice = ZSEQUENCE({0,1,1}) * xpie_slice0 ! 0,COS(s-a),COS(e-a)

! for performance optimization only use the shapes needed
IF `($n2colocate) EQ 0` THEN
! Only simple triangles are needed
  LET/QUIET  PLMxpolymark0 = xtriangle
  LET/QUIET  PLMypolymark0 = ytriangle

ELIF `($n2colocate) EQ 0` THEN
! Triangles and diamonds are needed
  LET/QUIET xcombine = xdiamond
  LET/QUIET ycombine = ydiamond
  LET/QUIET PLMxpolymark0 IF ndup EQ 0 THEN xtriangle ELSE xcombine
  LET/QUIET PLMypolymark0 IF ndup EQ 0 THEN ytriangle ELSE ycombine

ELSE
! All 3 shapes are needed
  LET/QUIET xcombine = IF ndup EQ 1 THEN xdiamond ELSE xpie_slice
  LET/QUIET ycombine = IF ndup EQ 1 THEN ydiamond ELSE ypie_slice
  LET/QUIET PLMxpolymark0 IF ndup EQ 0 THEN xtriangle ELSE xcombine
  LET/QUIET PLMypolymark0 IF ndup EQ 0 THEN ytriangle ELSE ycombine

ENDIF

! scale the marker size
LET/QUIET PLMxpolymark = PLMxpolymark0[k=1:3]*PLMxscale 
LET/QUIET PLMypolymark = PLMypolymark0[k=1:3]*PLMyscale 

! plot all of the points in a single command for efficiency
! if the key is colored on time, remove key value characters with shakey
!
! Longitude issues:
! --- original text --- 
! Depending upon the values used in SET REGION, the blank plot begun at
! the beginning of this script will cover a region somewhere in the
! domain -180:360.  The insitu_setup.jnl script guarantees that jlon 
! values are positive.  Thus, after plotting a first time, we need to
! subtract or add 360 from jlon and plot/over.
! --- original text --- 

! here is how to show all the locations, so profilew will be marked 
! with an x if there's no valid data in the color-by variable.
!plot/vs/nolab/noax/over/sym=2/siz=0.1 x_var_data, y_var_data

def sym word = "($data_var_in)"
IF `STRCMP(($word),"TAX")` THEN
  ! word is not TAX
  poly/coord_ax=Z/key/over/nolab($qualifiers)/set  x_var_data+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
  GO key_at_top
  PPL POLYGON/OVER

  IF `($region_x_lo) LT 0` THEN
    poly/coord_ax=Z/key/over/nolab($qualifiers)  x_var_data-360+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
  ENDIF
  IF `($region_x_hi) GT 360` THEN
    poly/coord_ax=Z/key/over/nolab($qualifiers)  x_var_data+360+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
  ENDIF
ELSE
  ! word is TAX
  IF `($ngood_data) eq 1` THEN
    ! Only one point, remove levels qualifier from poly command
    poly/coord_ax=Z/key/over/nolab/pal=($ferret_palette"rnb2")/set  x_var_data+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
    ppl shakey ,,0.0001
    ppl fillpol
    IF `($region_x_lo) LT 0` THEN
    poly/coord_ax=Z/key/over/nolab/pal=($ferret_palette"rnb2")/set  x_var_data-360+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
      ppl shakey ,,0.0001
      ppl fillpol
    ENDIF
    IF `($region_x_hi) GT 360` THEN
      poly/coord_ax=Z/key/over/nolab/pal=($ferret_palette"rnb2")/set  x_var_data+360+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
      ppl shakey ,,0.0001
      ppl fillpol
    ENDIF
  ELSE
    poly/coord_ax=Z/key/over/nolab($qualifiers)/set  x_var_data+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
    ppl shakey ,,0.0001
    ppl fillpol
    IF `($region_x_lo) LT 0` THEN
    poly/coord_ax=Z/key/over/nolab($qualifiers)/set  x_var_data-360+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
      ppl shakey ,,0.0001
      ppl fillpol
    ENDIF
    IF `($region_x_hi) GT 360` THEN
      poly/coord_ax=Z/key/over/nolab($qualifiers)/set  x_var_data+360+PLMxpolymark*sym_size, y_var_data+PLMypolymark*sym_size, var_data
      ppl shakey ,,0.0001
      ppl fillpol
    ENDIF
  ENDIF
ENDIF
