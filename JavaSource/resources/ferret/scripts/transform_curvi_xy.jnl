! transform_curvi_xy.jnl
! 
! 18-Apr-2007 extracted from LAS_transforms.jnl
! Set up for curvilinear XY data: curvilinear-to-rectilinear regridding
! or native curvilinear xy plots or sample from curvilinear coordinates.

DEFINE SYMBOL which_var ($num)

IF `($constraint_0_lhs"0|Curv_to_Rect_Regridding>1|*>0")` THEN 
   DEFINE SYMBOL data_var_transform = , Regridded Curvilinear to Rectilinear ($constraint_0_rhs)-degree Grid,
   DEFINE SYMBOL data_dup_varname ($data_var)_regrid
   DEFINE SYMBOL note_num = `($note_num"0") + 1`
   DEFINE SYMBOL note_($note_num)_lab = Regridded Curvilinear to Rectilinear ($constraint_0_rhs)-degree Grid

ELIF  `STRINDEX("($ferret_view)", "xy") EQ 0` THEN
   IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN 
      DEFINE SYMBOL data_var_transform = , Interpolated from Curvilinear coordinates
      DEFINE SYMBOL data_dup_varname ($data_var)_sample
      DEFINE SYMBOL note_num = `($note_num"0") + 1`
      DEFINE SYMBOL note_($note_num)_lab = Interpolated from Curvilinear coordinates
   ENDIF

ELSE
   IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN \
      DEFINE SYMBOL data_var_transform = , Interpolated from Curvilinear coordinates
ENDIF

! Check the regions in x and y. The Sampling schemes work best if they
! dont have to do moduloing; reset x regions to try to match the longitude
! coordinate variable, and call the initialize_region script again.

! For large datasets, we might pre-set these in the initialization script. 
! Compute them only if undefined

IF `($ferret_curv_lon_min"1|*>0")` THEN \
   DEFINE SYMBOL ferret_curv_lon_min = `($ferret_curvi_coord_lon)[d=($data_num),x=@min,y=@min]`
IF `($ferret_curv_lon_max"1|*>0")` THEN \
   DEFINE SYMBOL ferret_curv_lon_max = `($ferret_curvi_coord_lon)[d=($data_num),x=@max,y=@max]`

! e.g. tripolar grid where the range is 0 to 426 messes up the calculations...

IF `($ferret_curv_lon_max)- ($ferret_curv_lon_min) GT 360` THEN DEFINE SYMBOL ferret_curv_lon_max `($ferret_curv_lon_min) + 360`

IF `($region_x_lo_orig"0|*>1") EQ 0 AND ($region_0_x_lo"0|*>1|)` THEN
   DEFINE SYMBOL region_0_x_lo_orig =  ($region_0_x_lo)
   DEFINE SYMBOL region_0_x_hi_orig =  ($region_0_x_hi)
ENDIF

   GO LAS_initialize_region ($num)
IF `($region_x_lo) LT ($ferret_curv_lon_min)` THEN 
   DEFINE SYMBOL region_0_x_lo `($region_0_x_lo) + 360`
   DEFINE SYMBOL region_0_x_hi `($region_0_x_hi) + 360`

   GO LAS_initialize_region ($num)

ENDIF

IF `($region_x_hi) GT ($ferret_curv_lon_max)` THEN 
   DEFINE SYMBOL region_0_x_lo `($region_0_x_lo) - 360`
   DEFINE SYMBOL region_0_x_hi `($region_0_x_hi) - 360`

   GO LAS_initialize_region ($num)

   IF `($region_x_lo) LT ($ferret_curv_lon_min)` THEN  ! still crosses branch cut
      DEFINE SYMBOL two_slices 1  ! will need to use all xcoords (get_curv_coord_box)
   ENDIF
ENDIF

IF `($hvlimits_curvi"0|*>1") EQ 0` THEN 
   DEFINE SYMBOL hvlimits_curvi = /HLIM=($region_0_x_lo):($region_0_x_hi)/VLIM=($region_0_y_lo):($region_0_y_hi)
   DEFINE SYMBOL ferret_curvi_quals = ($hvlimits_curvi)
! curvilinear to rectilinear regridding
ENDIF

IF `($constraint_0_lhs"0|Curv_to_Rect_Regridding>1|*>0")` THEN
   IF ($region_t"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_t)
   IF ($region_z"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_z)
   IF ($region_zt"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_zt)
   IF ($region_($which_var)_zt"0|*>1") THEN DEFINE SYMBOL reg_zt ($region_($which_var)_zt)
   
   GO transform_curv_to_rect.jnl
   GO  LAS_initialize_region ($num)

   EXIT/SCRIPT
ENDIF

GO LAS_initialize_region ($num)

!!!!!!!!!!!

! Special setup, if a latitude has been specified such that the grid
! is linear south of ($ferret_linear_lat_max)

! Here we check whether the region is within the part of the grid that is rectilinear.
! If it is, then redefine the axes and proceed as if it is a rectilinear grid. Otherwise
! call LAS_set_strides_curvilinear.jnl


! If this is a vector plot, do this only once, on the first vector component

DEFINE SYMBOL check_linear = 1
IF ` ($operation_ID"0|Plot_vector>1|*>0") AND ($num) GT 0` THEN DEFINE SYMBOL check_linear = 0

IF `($ferret_linear_coords_file"0|same_as_infile>1|*>0")` THEN CANCEL SYMBOL ferret_linear_coords_file
IF `($ferret_linear_coords_file"0|*>1") AND ($check_linear)` THEN

   IF `($ferret_linear_lat_max"0|*>1") AND (($region_y_hi"0")  LT ($ferret_linear_lat_max))` THEN 
   
! If we have a precomputed set of new axes, and if we are in the linear portion of
! the grid, then redefine the axes.
      SET DATA "($ferret_linear_coords_file)"
      DEFINE SYMBOL xaxunits = `(HYCOM_lon_axis).units`
      DEFINE SYMBOL yaxunits = `(HYCOM_lat_axis).units`
      CANCEL DATA "($ferret_linear_coords_file)"

      DEFINE AXIS/X/UNITS="($xaxunits)"/modulo `($data_var),RETURN=xaxis` = x[gx=HYCOM_lon_axis]
      DEFINE AXIS/Y/UNITS="($yaxunits)" `($data_var),RETURN=yaxis` = y[gy=HYCOM_lat_axis]

! Now we no longer need to deal with this data as being on a curvilinear grid

      CANCEL SYMBOL ferret_curvi_coord_lon
      CANCEL SYMBOL ferret_curvi_coord_lat
      DEFINE SYMBOL do_curvi_xy = 0
      DEFINE SYMBOL do_curvi_xy_and_hybrid_z = 0
   
! Because we have redefined the axes we cant set native strides
      DEFINE SYMBOL no_native_strides_xy = 1
      GO  LAS_initialize_region ($num)

      EXIT/SCRIPT
   
   ELSE
   
! Get the range of I,J needed to grab the region. Use it to define the 
! plot or output variable.
        
      GO get_curv_coord_bbox.jnl

! Set striding. If this is a comparison plot do it only on the second
! variable.

      IF `($num)+1 EQ ($data_count)` THEN GO LAS_set_strides_curvilinear.jnl
   ENDIF

ELSE
   
   GO get_curv_coord_bbox.jnl
   IF `($data_count) GT 1 AND ($num) GT 0 AND ($its_prop_prop_plot"0|*>1")` THEN
      GO LAS_check_staggered_pp.jnl
   ENDIF
   GO LAS_set_strides_curvilinear.jnl

ENDIF

! redefine region symbols using the index ranges.
GO LAS_define_region_curvi_indices
!!!!!!!!!!!

! Set up native curvilinear plots
LET/TITLE="Longitude"/units=degrees xcoord = ($ferret_curvi_coord_lon)[d=($data_num)]
LET/TITLE="Latitude"/units=degrees  ycoord = ($ferret_curvi_coord_lat)[d=($data_num)]

!   Native plot in XY

! Move setup for XY plot inside LAS_set_curvi_plot_var.jnl 6/26/2012
IF ($ferret_view"|xy>1|*>0") THEN 
   GO LAS_set_curvi_plot_var
   EXIT/SCRIPT
ENDIF

! Or set up for native slices: Sample in the X and Y directions of the slice

IF `STRLEN ("($ferret_view)") LE 2` THEN

   IF ($ferret_interpolate_data%0|false>0|true>1|1|0|*>1%) THEN 
      GO curvi_sample_slice.jnl
      DEFINE SYMBOL data_var_transform = , Interpolated from Curvilinear coordinates
      DEFINE SYMBOL note_num = `($note_num"0") + 1`
      DEFINE SYMBOL note_($note_num)_lab = Interpolated from Curvilinear coordinates

   ELSE
      GO curvi_nrst_slice.jnl
   ENDIF
   IF ($itsa_vector_plot"0") THEN 
      DEFINE SYMBOL ferret_plot_base_var_noregion($var_num) = sampled_var($var_num)
      DEFINE SYMBOL ferret_plot_var = sampled_var($var_num)
      DEFINE SYMBOL is_sampled = 1
   ENDIF
   EXIT/SCRIPT
ENDIF

IF `STRLEN ("($ferret_view)") GT 2 AND STRINDEX("($ferret_view)", "xy") GT 0` THEN  ! google placemarks

   DEFINE SYMBOL native_curvilinear_xy = 1

   
! If the 1-D coordinate axes are modulo, as in the GFDL tri-polar grid, Ferret may 
! try to do moduloing operations when reading xcoord and ycoord but not on the 
! variable ferret_plot_var. That can cause errors. We are using just the 2-D 
! coordinate variables, best to cancel the modulo character of the 1-D coordinates.

cancel axis/modulo ` ($ferret_curvi_coord_lon), return=xaxis`


ENDIF

! End of $RCSfile ------------transform_curvi_xy.jnl-------------------------------
