!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! $RCSfile: list_grid.jnl,v $
! $Revision: 1.4 $
! 
! $Author: Jing $
! $Date: 2007/07/24 
! 4/28/2008 ACM refer always to ($data_var)[d=($data_num)] as there
!           may be other datasets open, e.g. for transformed variables.
! 
! 6/6/2008 ACM. Add definitions of the longitude and latitude variables
!          and the mask, specialized to the case of curvilinear data.
!
!
! list_grid.jnl creates a listing (in XML format) of grid point locations
! and some ancillary information, dataset ID, variable ID, ferret_view,
! data intervals, z and or t region

! DEFINE SYMBOLs associated with the regiogn and data and perform any
! initialization needed for this dataset.

!define this symbol so that Google earth settings will be made.
DEFINE SYMBOL ferret_google_plot = 1

! If data_0_intervals is not defined, issue an error.
IF `($data_0_intervals"0|*>1) EQ 0` THEN 
  MESSAGE/ERROR **ERROR: In list_grid.jnl, data_0_intervals symbol must be defined.
  EXIT/PROGRAM
ENDIF

GO LAS_initialize_region 0
GO LAS_initialize_data 0

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Here is the variable we will list out, with the region specified.
DEFINE SYMBOL ferret_list_var = ($ferret_plot_var)
    IF ($native_curvilinear_xy"0|*>1") THEN DEFINE SYMBOL ferret_list_var ($ferret_plot_base_var)

! Set up the resolution of the placemarks
GO LAS_set_GE_placemarks

IF ($xstride_coord"0|*>1") THEN 
  DEFINE SYMBOL xstride_coord = `MAX(1, INT(0.5 + ($xstride_coord)) )`
ELSE 
  DEFINE SYMBOL xstride_coord = 1
ENDIF
IF ($ystride_coord"0|*>1") THEN 
  DEFINE SYMBOL ystride_coord = `MAX(1, INT(0.5 + ($ystride_coord)) )`
ELSE 
  DEFINE SYMBOL ystride_coord = 1
ENDIF

! Decode format argument
! ACM NOTE: The slashes mess up parsing in the DEFINE SYMBOL if we do them all at once.
! ferret_format may be asc, txt, or cdf

CANCEL SYMBOL frmt 

!SET LIST/FILE="($result_ferret_listing_filename)"
SET LIST/FILE="($result_las_request_info_filename)"

! Do more striding for placemark locations. Assure that there are 2 points in
! each direction.

IF ($native_curvilinear_xy"0") THEN 
   LET lons = ($ferret_curvi_coord_lon)[d=($data_num)]  
   LET lats = ($ferret_curvi_coord_lat)[d=($data_num)]
   LET llon = \
     lons[i=($clon_imin):($clon_imax):($xstride_coord),J=($clat_jmin):($clat_jmax):($ystride_coord)]
   LET llat = \
     lats[i=($clon_imin):($clon_imax):($xstride_coord),J=($clat_jmin):($clat_jmax):($ystride_coord)]
ELSE
   
   LET lons = X[GX=($ferret_list_var)] + 0*Y[GY=($ferret_list_var)]
   LET llon = lons[X=($region_x_lo):($region_x_hi):($xstride_coord),Y=($region_y_lo):($region_y_hi):($ystride_coord)]

   LET lats = 0*X[GX=($ferret_list_var)] + Y[GY=($ferret_list_var)]
   LET llat = lats[X=($region_x_lo):($region_x_hi):($xstride_coord),Y=($region_y_lo):($region_y_hi):($ystride_coord)]
    
   DEFINE SYMBOL do_xstride_coord = :($xstride_coord)
   DEFINE SYMBOL do_ystride_coord = :($ystride_coord)
   LET llon = lons[X=($region_x_lo):($region_x_hi)($do_xstride_coord),Y=($region_y_lo):($region_y_hi)($do_ystride_coord)]
   LET llat = lats[X=($region_x_lo):($region_x_hi)($do_xstride_coord),Y=($region_y_lo):($region_y_hi)($do_ystride_coord)]
ENDIF  ! native_curvi_xy

! mask is 1 where ferret_list_var is valid, and missing otherwise.

! Default mask if no other mask is defined 
LET mask = {1}

IF ($data_0_intervals"0|xy>1|*>0") THEN

  DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
   X=($region_x_lo):($region_x_hi):($xstride_coord),Y=($region_y_lo):($region_y_hi):($ystride_coord)]
  IF ($native_curvilinear_xy"0") THEN \
    DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
    i=($clon_imin):($clon_imax):($xstride_coord),j=($clat_jmin):($clat_jmax):($ystride_coord)]

  LET xyvar = ($tmp) 
  LET mask =  IF xyvar GT -9000 THEN 1
ENDIF

IF ($data_0_intervals"0|xyt>1|*>0") THEN

  DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
    X=($region_x_lo):($region_x_hi):($xstride_coord),Y=($region_y_lo):($region_y_hi):($ystride_coord),\
    T="($region_t_lo)":"($region_t_hi)"]
  
  IF ($native_curvilinear_xy"0") THEN \
    DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
       i=($clon_imin):($clon_imax):($xstride_coord),j=($clat_jmin):($clat_jmax):($ystride_coord),\
       T="($region_t_lo)":"($region_t_hi)"]

  LET xytvar = ($tmp)
  LET mask =  IF xytvar[T=@NGD] GT 0 THEN 1
ENDIF

IF ($data_0_intervals"0|xyz>1|*>0") THEN
  DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
  X=($region_x_lo):($region_x_hi):($xstride_coord),Y=($region_y_lo):($region_y_hi):($ystride_coord),\
  Z=($region_z_lo):($region_z_hi)]

  IF ($native_curvilinear_xy"0") THEN \
    DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
    i=($clon_imin):($clon_imax):($xstride_coord),j=($clat_jmin):($clat_jmax):($ystride_coord),\
    Z=($region_z_lo):($region_z_hi)]

  LET xyzvar = ($tmp)
  LET mask =  IF xyzvar[Z=@NGD] GT 0 THEN 1
ENDIF

IF ($data_0_intervals"0|xyzt>1|*>0") THEN
  DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
  X=($region_x_lo):($region_x_hi):($xstride_coord),Y=($region_y_lo):($region_y_hi):($ystride_coord),\
  Z=($region_z_lo):($region_z_hi),T="($region_t_lo)":"($region_t_hi)"]
  IF ($native_curvilinear_xy"0") THEN \
    DEFINE SYMBOL tmp = ($data_var)[d=($data_num),\
    i=($clon_imin):($clon_imax):($xstride_coord),j=($clat_jmin):($clat_jmax):($ystride_coord),\
    ($region_zt)]
  LET xyztvar = ($tmp)
  IF `($region_z"0|*>1") AND ($region_t"0|*>1")` THEN 
     LET mask = IF xyztvar[Z=@NGD,T=@NGD] GT 0 THEN 1
  ELIF ($region_z"0|*>1") THEN
     LET mask = IF xyztvar[Z=@NGD] GT 0 THEN 1
  ELIF ($region_t"0|*>1") THEN 
     LET mask = IF xyztvar[T=@NGD] GT 0 THEN 1
  ELSE
     LET mask = {1}
  ENDIF
ENDIF

LET llon_list = XSEQUENCE(llon*mask)
LET llat_list = XSEQUENCE(llat*mask)

LET ngood = llon_list[x=@ngd]

!==================================================
! output info about the LAS request and the dataset
!==================================================

LET xml = "<?xml version='1.0' encoding='UTF-8'?>"
define variable len = STRLEN(xml)
define symbol fmt = A`len`
list/norowhead/nohead/clobber/format=(($fmt))/FILE xml

!root of the xml file
LET f = "<las_req_info>"
list/norowhead/nohead/format=(A14)/FILE/append f

!==================
! output dataset ID
!==================
LET dsID = "($data_0_dataset_ID)"
define variable len = STRLEN(dsID)
define symbol fmt = A`len`
list/nohead/format=("<dataset_id>",($fmt),"</dataset_id>")/FILE/append dsID

!===================
! output variable ID
!===================
LET varID = "($data_0_ID)"
define variable len = STRLEN(varID)
define symbol fmt = A`len`
list/nohead/format=("<variable_id>",($fmt),"</variable_id>"))/FILE/append varID

!=====================
! output data interval
!=====================
LET dsIntervals = "($data_0_intervals)"
define variable len = STRLEN(dsIntervals)
define symbol fmt = A`len`
list/nohead/format=("<data_intervals>",($fmt),"</data_intervals>")/FILE/append dsIntervals

!===================
! output ferret_view
!===================
LET view = "($ferret_view)"
define variable len = STRLEN(view)
define symbol fmt = A`len`
list/nohead/format=("<ferret_view>",($fmt),"</ferret_view>")/FILE/append view

!==========================
! output ferret_deg_min_sec
!==========================
IF ($ferret_deg_min_sec"0|*>1") THEN
    LET dms = "($ferret_deg_min_sec)"
    define variable len = STRLEN(dms)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_deg_min_sec>",($fmt),"</ferret_deg_min_sec>")/FILE/append dms
ENDIF

!=============================
! output ferret_dep_axis_scale
!=============================
IF ($ferret_dep_axis_scale"0|*>1") THEN
    LET das = "($ferret_dep_axis_scale)"
    define variable len = STRLEN(das)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_dep_axis_scale>",($fmt),"</ferret_dep_axis_scale>")/FILE/append das
ENDIF

!=========================
! output ferret_expression
!=========================
IF ($ferret_expression"0|*>1") THEN
    LET expression = "($ferret_expression)"
    define variable len = STRLEN(expression)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_expression>",($fmt),"</ferret_expression>")/FILE/append expression
ENDIF

!========================
! output ferret_fill_type
!======================== 
IF ($ferret_fill_type"0|*>1") THEN
    LET fillType = "($ferret_fill_type)"
    define variable len = STRLEN(fillType)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_fill_type>",($fmt),"</ferret_fill_type>")/FILE/append fillType
ENDIF

!===============================
! output ferret_interpolate_data
!===============================
IF ($ferret_interpolate_data"0|*>1") THEN
    LET intpData = "($ferret_interpolate_data)"
    define variable len = STRLEN(intpData)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_interpolate_data>",($fmt),"</ferret_interpolate_data>")/FILE/append intpData
ENDIF

!=========================
! output ferret_line_color
!=========================
IF ($ferret_line_color"0|*>1") THEN
    LET lineColor = "($ferret_line_color)"
    define variable len = STRLEN(lineColor)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_line_color>",($fmt),"</ferret_line_color>")/FILE/append lineColor
ENDIF

!==========================
! output ferret_line_or_sym
!==========================
IF ($ferret_line_or_sym"0|*>1") THEN
    LET lineSym = "($ferret_line_or_sym)"
    define variable len = STRLEN(lineSym)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_line_or_sym>",($fmt),"</ferret_line_or_sym>")/FILE/append lineSym
ENDIF
                      
!=============================
! output ferret_line_thickness
!=============================
IF ($ferret_line_thickness"0|*>1") THEN
    LET lineThickness = "($ferret_line_thickness)"
    define variable len = STRLEN(lineThickness)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_line_thickness>",($fmt),"</ferret_line_thickness>")/FILE/append lineThickness
ENDIF
          
!======================
! output ferret_margins
!======================
IF ($ferret_margins"0|*>1") THEN
    LET margins = "($ferret_margins)"
    define variable len = STRLEN(margins)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_margins>",($fmt),"</ferret_margins>")/FILE/append margins
ENDIF

!===================
! output ferret_size
!===================
IF ($ferret_size"0|*>1") THEN
    LET size = "($ferret_size)"
    define variable len = STRLEN(size)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_size>",($fmt),"</ferret_size>")/FILE/append size
ENDIF
 
!=============================
! output ferret_use_graticules
!=============================
IF ($ferret_use_graticules"0|*>1") THEN
    LET useGraticules = "($ferret_use_graticules)"
    define variable len = STRLEN(useGraticules)
    define symbol fmt = A`len`
    list/nohead/format=("<ferret_use_graticules>",($fmt),"</ferret_use_graticules>")/FILE/append useGraticules
ENDIF

!==========================
! output ferret_use_ref_map
!==========================
    IF ($ferret_use_ref_map"0|*>1") THEN
        LET useRefMap = "($ferret_use_ref_map)"
        define variable len = STRLEN(useRefMap)
        define symbol fmt = A`len`
        list/nohead/format=("<ferret_use_ref_map>",($fmt),"</ferret_use_ref_map>")/FILE/append useRefMap
    ENDIF

!===============================
! output xstride and ystride
! stride values (index) for plot
!===============================
    LET xst = "($xstride)"
    define variable len = STRLEN(xst)
    define symbol fmt = A`len`
    list/nohead/format=("<x_stride>",($fmt),"</x_stride>")/FILE/append xst

    LET yst = "($ystride)"
    define variable len = STRLEN(yst)
    define symbol fmt = A`len`
    list/nohead/format=("<y_stride>",($fmt),"</y_stride>")/FILE/append yst

!==============================================
! output xstride_coord and ystride_coord
! stride values (corrdinates) for GE placemarks
!==============================================
    LET xstcoord = "($xstride_coord)"
    define variable len = STRLEN(xstcoord)
    define symbol fmt = A`len`
    list/nohead/format=("<xstride_coord>",($fmt),"</xstride_coord>")/FILE/append xstcoord

    LET ystcoord = "($ystride_coord)"
    define variable len = STRLEN(ystcoord)
    define symbol fmt = A`len`
    list/nohead/format=("<ystride_coord>",($fmt),"</ystride_coord>")/FILE/append ystcoord

!======================
! output x and y region
!======================
    LET xll = "($region_x_lo)"
    define variable len = STRLEN(xll)
    define symbol fmt = A`len`
    list/nohead/format=("<x_axis_lower_left>",($fmt),"</x_axis_lower_left>")/FILE/append xll

    LET yll = "($region_y_lo)"
    define variable len = STRLEN(yll)
    define symbol fmt = A`len`
    list/nohead/format=("<y_axis_lower_left>",($fmt),"</y_axis_lower_left>")/FILE/append yll

    LET xur = "($region_x_hi)"
    define variable len = STRLEN(xur)
    define symbol fmt = A`len`
    list/nohead/format=("<x_axis_upper_right>",($fmt),"</x_axis_upper_right>")/FILE/append xur

    LET yur = "($region_y_hi)"
    define variable len = STRLEN(yur)
    define symbol fmt = A`len`
    list/nohead/format=("<y_axis_upper_right>",($fmt),"</y_axis_upper_right>")/FILE/append yur

!=========================
! output z and/or t ranges
!=========================
    DEFINE SYMBOL max_tpoints 21   ! should be an odd number

    !XYT dataset
    IF ($data_0_intervals"0|xyt>1|*>0") THEN
        DEFINE SYMBOL nt `($ferret_list_var),return=lsize`   ! no. of time points requested
        IF `($nt) eq 1` THEN
            LET L0 = `($ferret_list_var),return=lstart`
            LET maxL = `($data_var)[d=($data_num)],return=lsize`   ! no. of time points total
            LET hafmax = `INT(($max_tpoints)/2)`

            IF `maxL LE ($max_tpoints)` THEN
                DEFINE SYMBOL lmin 1
                DEFINE SYMBOL lmax `maxL`
            ELSE
                DEFINE SYMBOL lmin `MAX(L0-hafmax,1)`
                DEFINE SYMBOL lmax `MIN(L0+hafmax,maxL)`
            ENDIF

            LET tlo = "`($data_var)[d=($data_num),L=($lmin)],return=TSTART`"
            LET thi = "`($data_var)[d=($data_num),L=($lmax)],return=TEND`"

        ELSE
            LET tlo = "($region_0_t_lo)"
            LET thi = "($region_0_t_hi)"
        ENDIF

        LET f = "<t_region>"
        list/norowhead/nohead/format=(A10)/FILE/append f

        define variable len = STRLEN(tlo)
        define symbol fmt = A`len`
        list/nohead/format=("<t_lo>",($fmt),"</t_lo>")/FILE/append tlo

        define variable len = STRLEN(thi)
        define symbol fmt = A`len`
        list/nohead/format=("<t_hi>",($fmt),"</t_hi>")/FILE/append thi

        LET f = "</t_region>"
        list/norowhead/nohead/format=(A11)/FILE/append f

    ENDIF

    !XYZ dataset
    IF ($data_0_intervals"0|xyz>1|*>0") THEN

        DEFINE SYMBOL nz `($ferret_list_var),return=ksize`   ! no. of depth points requested
    
        IF `($nz) eq 1` THEN                                 ! XY view being selected
            LET maxK = `($data_var),return=ksize`            ! no. of depth points total
            DEFINE SYMBOL kmin 1
            DEFINE SYMBOL kmax `maxK`
            LET zlo = "`($data_var)[d=($data_num),K=($kmin)],return=ZSTART`"
            LET zhi = "`($data_var)[d=($data_num),K=($kmax)],return=ZEND`"
        ELSE                                                 ! XYZ view being selected
            LET zlo = "($region_0_z_lo)"
            LET zhi = "($region_0_z_hi)"
        ENDIF

        LET f = "<z_region>"
        list/norowhead/nohead/format=(A10)/FILE/append f

        define variable len = STRLEN(zlo)
        define symbol fmt = A`len`
        list/nohead/format=("<z_lo>",($fmt),"</z_lo>")/FILE/append zlo

        define variable len = STRLEN(zhi)
        define symbol fmt = A`len`
        list/nohead/format=("<z_hi>",($fmt),"</z_hi>")/FILE/append zhi

        LET f = "</z_region>"
        list/norowhead/nohead/format=(A11)/FILE/append f
    ENDIF

    !XYZT
    IF ($data_0_intervals"0|xyzt>1|*>0") THEN

        IF ($ferret_view"|xy>1|*>0") THEN    ! XY view being selected

            ! output user selected T
            LET userT = "($region_0_t_lo)"
            define variable len = STRLEN(userT)
            define symbol fmt = A`len`
            list/nohead/format=("<t_user>",($fmt),"</t_user>")/FILE/append userT

            ! output user selected Z
            LET userZ = "($region_0_z_lo)"
            define variable len = STRLEN(userZ)
            define symbol fmt = A`len`
            list/nohead/format=("<z_user>",($fmt),"</z_user>")/FILE/append userZ

            ! output whole range of Z
            LET maxK = `($data_var),return=ksize`            ! no. of depth points total
            DEFINE SYMBOL kmin 1
            DEFINE SYMBOL kmax `maxK`
            LET zlo = "`($data_var)[d=($data_num),K=($kmin)],return=ZSTART`"
            LET zhi = "`($data_var)[d=($data_num),K=($kmax)],return=ZEND`"

            ! compute range of T in the same way as done in the XYT case

            DEFINE SYMBOL nt `($ferret_list_var),return=lsize`   ! no. of time points requested
            IF `($nt) eq 1` THEN
                LET L0 = `($ferret_list_var),return=lstart`
                LET maxL = `($data_var)[d=($data_num)],return=lsize`   ! no. of time points total
                LET hafmax = `INT(($max_tpoints)/2)`

                IF `maxL LE ($max_tpoints)` THEN
                    DEFINE SYMBOL lmin 1
                    DEFINE SYMBOL lmax `maxL`
                ELSE
                    DEFINE SYMBOL lmin `MAX(L0-hafmax,1)`
                    DEFINE SYMBOL lmax `MIN(L0+hafmax,maxL)`
                ENDIF

                LET tlo = "`($data_var)[d=($data_num),L=($lmin)],return=TSTART`"
                LET thi = "`($data_var)[d=($data_num),L=($lmax)],return=TEND`"

            ELSE
                LET tlo = "($region_0_t_lo)"
                LET thi = "($region_0_t_hi)"
            ENDIF

        ELSE                                ! either XYZ or XYT view being selected
            LET zlo = "($region_0_z_lo)"
            LET zhi = "($region_0_z_hi)"
            LET tlo = "($region_0_t_lo)"
            LET thi = "($region_0_t_hi)"
        ENDIF

        LET f = "<z_region>"
        list/norowhead/nohead/format=(A10)/FILE/append f

        !LET zlo = "($region_0_z_lo)"
        define variable len = STRLEN(zlo)
        define symbol fmt = A`len`
        list/nohead/format=("<z_lo>",($fmt),"</z_lo>")/FILE/append zlo

        !LET zhi = "($region_0_z_hi)"
        define variable len = STRLEN(zhi)
        define symbol fmt = A`len`
        list/nohead/format=("<z_hi>",($fmt),"</z_hi>")/FILE/append zhi

        LET f = "</z_region>"
        list/norowhead/nohead/format=(A11)/FILE/append f

        LET f = "<t_region>"
        list/norowhead/nohead/format=(A10)/FILE/append f
  
        !LET tlo = "($region_0_t_lo)"
        define variable len = STRLEN(tlo)
        define symbol fmt = A`len`
        list/nohead/format=("<t_lo>",($fmt),"</t_lo>")/FILE/append tlo

        !LET thi = "($region_0_t_hi)"
        define variable len = STRLEN(thi)
        define symbol fmt = A`len`
        list/nohead/format=("<t_hi>",($fmt),"</t_hi>")/FILE/append thi

        LET f = "</t_region>"
        list/norowhead/nohead/format=(A11)/FILE/append f

    ENDIF

LET f = "</las_req_info>"
list/norowhead/nohead/format=(A15)/FILE/append f

!====================================
! list grid points to a separate file
! each line is a grid point (lon lat)
!====================================

    SET LIST/FILE="($result_ferret_listing_filename)"

    LIST/I=1/NOHEADER/NOROWHEADER/CLOBBER/FORMAT=(f7.2, f7.2)/FILE  COMPRESSI(llon_list), COMPRESSI(llat_list)
    LIST/I=2:`ngood`/NOHEADER/NOROWHEADER/APPEND/FORMAT=(f7.2, f7.2)/FILE  COMPRESSI(llon_list), COMPRESSI(llat_list)
