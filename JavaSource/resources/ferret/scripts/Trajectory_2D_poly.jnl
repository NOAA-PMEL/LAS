!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! $Header$
! Trajectory_2D_poly.jnl
!
! Creates a 2D plot with a blank 'basemap' and an overlay of points
! colored by the ($ferret_plot_var) defined in LAS_initialize_data_insitu.
!
! 1/2010 acm - For Cruise ID, thin out the icons which are too dense to see well.
!              leave a thin dotted line at the original density
!              add to the title, "from data sampled every xxx"
! 12/2013 ACM  Always draw with ribbon plot style
!
! 8/2016 *acm* If the Ferret property traj_discrete has been set, check 
! whether the distance between points is large; if so plot as discrete 
! points connected with a thin line.

IF `($ferret_memory"25.6") LT 200` THEN SET MEM/SIZ=200

DEFINE SYMBOL start_clock_seconds = ($clock_secs)


! Set the gif filename, changing it from .gif to the name from this request
! Set up to write info to the debug log so that FshowGO can be used
GO LAS_initial_setup

! Initialize the region and data.

DEFINE SYMBOL data_initialization_script = Trajectory_initialize_data_insitu
DEFINE SYMBOL data_initialization_script = feature_initialize_data_insitu

! DEFINE SYMBOL ferret_label = 0

SET MODE verify:always  ! allows for debugging

DEFINE SYMBOL its_insitu = 1
DEFINE SYMBOL its_trajectory_map = 1
GO LAS_initialize_region 0

IF ($data_0_var"0|vid>1|*>0")  THEN
   DEFINE SYMBOL ferret_by_id = 1
   USE "($data_0_url)"
   LET varnames = ..varnames

   DEFINE SYMBOL data_0_var = `varnames[i=1]`
   CANCEL DATA "($data_0_url)"
ENDIF
DEFINE SYMBOL data_name_in = ($data_0_var)

GO LAS_initialize_data 0

! Check for errors (They often occur during dataset initialization.)

IF ($error_status"0|*>1") THEN
  MESSAGE/ERROR **ERROR ($error_string)
  EXIT/PROGRAM
ENDIF

! Set the URL label for the first dataset.
GO LAS_url_label 0

! For the annotations
IF `($ngood_data"-10|*>1") LT 0` THEN DEFINE SYMBOL ngood_data = `($data_var)[i=@NGD]`
IF `($nbad_data"-10|*>1") LT 0` THEN DEFINE SYMBOL nbad_data = `($data_var)[i=@NBD]`

IF `STRINDEX("($ferret_view"0")", "x") EQ 0` THEN

  MESSAGE/ERROR **ERROR Expecting a view in xy or xyt
  EXIT/PROGRAM
ENDIF

LET/UNITS=degrees_east x_var_data = ($data_x_var)
IF `($nodata"0|*>1") EQ 0` THEN
   STAT x_var_data
ELSE
   DEFINE SYMBOL stat_min ($region_x_lo)
ENDIF

IF ($data_y_var"0|*>1") THEN LET/UNITS=degrees_north y_var_data = ($data_y_var)
IF ($data_z_var"0|*>1") THEN LET z_var_data = ($data_z_var)
IF ($data_t_var"0|*>1") THEN LET t_var_data = ($data_t_var)
LET var_data = ($data_var)

DEFINE SYMBOL var_data = ($data_var)[i=1,m=1]
DEFINE SYMBOL vtype = 0
LET gettype= ($var_data)
DEFINE SYMBOL vtype = `gettype,RETURN=dtype`
DEFINE SYMBOL is_string = ($vtype"0|CHAR>1|*>0")

IF `($is_string) AND ($ferret_strfloat"0|*>1")` THEN 
   SET VAR/NAME = var_data_0  var_data 
   LET var_data = STRFLOAT(var_data_0)
   SET ATT/LIKE=var_data_0 var_data
   DEFINE SYMBOL ferret_plot_var var_data
ENDIF

! Special color-by-time key
IF ($ferret_plot_key"0|date_key>1|*>0") THEN 

! In this case we set up a time axis, and label the color key with dates
! If the units are seconds since, we don't need that much resolution for this. Make it hours.

   LET tmin = ($data_var)[i=@MIN]
   LET tmax = ($data_var)[i=@MAX]

   LET since_loc = STRINDEX("`($data_t_var).units`","since") - 2
   IF `since_loc GT 1` THEN 
      LET tunits = SUBSTRING("`($data_t_var).units`",1,`since_loc`)
      DEFINE SYMBOL tunits = `tunits`
   ENDIF
   DEFINE AXIS/T=`tmin`:`tmax`:1/T0="`($data_t_var).time_origin`"/units=($tunits) time_axis 
   IF ($tunits"0|seconds>1|*>0") THEN \
   DEFINE AXIS/T=`tmin`:`tmax`:3600/T0="`($data_t_var).time_origin`"/units=($tunits) time_axis 
   DEFINE SYMBOL datekey = 1

   DEFINE SYMBOL ferret_key_annotate = 0

   LET ttvar = t[gt=time_axis]
   DEFINE SYMBOL datekey_time_arg = ttvar

   IF `($ferret_plot_levels"0|*>1") EQ 0` THEN DEFINE SYMBOL ferret_plot_levels = 50
   IF `($ferret_fill_levels"0|*>1") EQ 0` THEN DEFINE SYMBOL ferret_fill_levels = ($ferret_plot_levels)

ENDIF

IF ($ferret_by_id"0|*>1") THEN
   DEFINE SYMBOL ferret_plot_levels = `($rowvar),RETURN=lsize`
   LET id_data = COMPRESSI(XSEQUENCE(TRANSPOSE_XZ(id_by_c)))
   LET var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL var_data = id_data[i=1:`($data_x_var),RETURN=isize`]
   DEFINE SYMBOL ferret_plot_title Colored by Trajectory Number
ENDIF

! Set color levels
GO LAS_initialize_var_levels

! Color key for the variable values.
! If there is no plot variable defined (only plotting locations),
! do not plot the key.

IF ($ferret_plot_key"1|0|*>1") THEN
  IF `($ferret_plot_key"0|0|1>0|*>1") EQ 0` THEN DEFINE SYMBOL ferret_plot_key = ($ferret_plot_var"0|*>1")
ENDIF

! Plot qualifiers (graticule lines etc)
GO LAS_set_plot_qualifiers
IF `STRINDEX("($qualifiers)", "KEY") EQ 0 AND ($ferret_plot_key"0|*>1")` THEN DEFINE SYMBOL qualifiers = ($qualifiers)/KEY 

! Open the window
GO LAS_open_window

SAY _________________ Before land underlay clock seconds:                        ($clock_secs)

LET pre_plot = ($clock_secs)

! Create the blank plot with bathymetries,
! coastlines, EEZ's, etc.
! Make the gray ocean lighter. To make it lighter still,
! start the colors with -40000. A lighter map needs darker graticule lines.

! In trajectory_ui.xml is an option "Bathymetry style".  Choose a white
! background or the default grayscale bathymetry.

DEFINE SYMBOL basemap_palette = grayscale

DEFINE SYMBOL basemap_levels = (-inf)(-20000,-1000,500)(-1000,0,100)

IF ($ferret_bathymetry_style"1|grayscale>1|*>0") THEN 
   PPL COLOR,7,55,55,55     ! gray
ENDIF

IF ($ferret_bathymetry_style"0|white>1|*>0") THEN DEFINE SYMBOL basemap_palette = white
IF ($ferret_bathymetry_style"0|blue>1|*>0") THEN 
   DEFINE SYMBOL basemap_palette = osmc_bluescale
   DEFINE SYMBOL basemap_levels = (-20000)(-10000,0,10000)
ENDIF

GO LAS_XY_overlay_basemap

PPL SHASET PROTECT

! Note LAS_fland.jnl determines the resoultion from the region symbols.
!  GO LAS_fland black
!  GO LAS_fland navy
!  GO LAS_fland brown_dark
!  GO LAS_fland green_pine

GO LAS_fland ($ferret_land_palette"gray_dark")

PPL SHASET PROTECT
SAY _________________ After land underlay clock seconds:                         ($clock_secs)
SAY _________________ total time for land underlay, seconds                                 ----- `($clock_secs) - pre_plot`

! Turn on annotate_key, which persists until turned off
! (unless key_annoatate property tells us otherwise).

IF ($ferret_key_annotate"1|0|1|*>1") THEN
   KEYMARK 1
ELSE
   KEYMARK 0
ENDIF

! Define plot qualifiers for polygon overlay

!CANCEL SYMBOL qualifiers 
DEFINE SYMBOL qualifiers = ($qualifiers)/OVER/NOLAB


! Get info for deciding on line thickness
GO feature_labels

! Ribbon plot
DEFINE SYMBOL plot_command = PLOT/VS/RIBBON/LINE/FAST
IF ($thinline"0|*>1") THEN 
   DEFINE SYMBOL plot_command = PLOT/VS/RIBBON
   DEFINE SYMBOL thinline_plot_vars = x_var_data, y_var_data
ENDIF

!DEFINE SYMBOL plot_command = PLOT/VS/RIBBON/SYM=dot

IF `($drawthick"0|*>1") EQ 0` THEN 
   DEFINE SYMBOL drawthick = 1
   DEFINE SYMBOL drawthick = 2

   IF ($decimation_fraction"0|*>1") THEN 
      DEFINE SYMBOL  drawthick = 2
   ELSE
      IF `featuresize LT 20` THEN DEFINE SYMBOL drawthick = 3
   ENDIF

!    If there's not a lot of data on the map and the region is pretty small, 
!   IF `featuresize LT 20 AND (($basemap_area"0") LT 0.2)` THEN DEFINE SYMBOL drawthick = 3

! Try this first, few cruises --> thick
   IF `featuresize LT 20` THEN DEFINE SYMBOL drawthick = 3
ENDIF

IF `($drawthick"0|1|2|3|*>0") GT 1` THEN DEFINE SYMBOL qualifiers = ($qualifiers)/THICK=($drawthick)


! Is this a single mooring where all the location data is at a single location?  If so make a colored symbol

LET lonattnames = ($data_x_var_in).attnames
LET latattnames = ($data_y_var_in).attnames
IF `IS_ELEMENT_OF_STR(lonattnames, "actual_range") GT 0 AND \
 IS_ELEMENT_OF_STR(lonattnames, "actual_range") GT 0` THEN

   LET lvar = ($data_x_var_in).actual_range
   LET lonmin `lvar[i=@min],PREC=9`
   LET lonmax `lvar[i=@max],PREC=9`

   LET lvar = ($data_y_var_in).actual_range
   LET latmax `lvar[i=@max],PREC=9`
   LET latmin `lvar[i=@min],PREC=9`

   IF `lonmax-lonmin LT 0.1 AND latmax-latmin LT 0.1` THEN 
      DEFINE SYMBOL qualifiers = ($qualifiers)/SYM=21/SIZ=0.1
      DEFINE SYMBOL is_mooring = 1
   ENDIF
ENDIF

IF ($single_color"0|*>1") THEN
   DEFINE SYMBOL plot_command = PLOT/VS/LINE/color=5
ENDIF

! When there are just a few points (missing or valid), draw a colored symbol as well as the ribbon line.
IF `npts LE 30` THEN DEFINE SYMBOL qualifiers = ($qualifiers)/SYM=17

! Points will mark location of missing data if needed
! Use color=1 for black...
LET missing_flag = -9999999
LET/UNITS=degrees_east  x_loc_bad = IF MISSING(var_data,missing_flag) EQ missing_flag THEN x_var_data 
LET/UNITS=degrees_north y_loc_bad = IF MISSING(var_data,missing_flag) EQ missing_flag THEN y_var_data 

! Set the palette
! If there is no variable, only locations, and if a palette is not 
! defined by ferret_palette, use black.

IF ($ferret_plot_var"0|*>1") THEN
   DEFINE SYMBOL qualifiers = ($qualifiers)/PALETTE=($ferret_palette"default|*>*")
ELSE
   DEFINE SYMBOL qualifiers = ($qualifiers)/PALETTE=($ferret_palette"black|default>black|*>*")/NOKEY
ENDIF

SAY _________________ Start line plot: clock seconds:                            ($clock_secs)
LET pre_plot = ($clock_secs)

! Draw the ribbon plot
! With Ferret v6.95 and higher, and if there is a gap_var variable,
! use the PLOT/VS/GAPLOC qualifier to pick up the pen, e.g. when 
! the sample number is not sequential, indicating a gap due to 
! region or constraints. See setup_dsg_variables.jnl

IF ($single_color"0|*>1") THEN
   DEFINE SYMBOL plot_plot_vars = x_var_data, y_var_data
    ($plot_command)($qualifiers) ($plot_plot_vars)
ELSE
! or /missing=blank or leave off for gray...

   DEFINE SYMBOL plot_plot_vars = x_var_data, y_var_data, var_data 
   
   IF `($ferret_version) GE 6.95 AND ($have_gap_var"0|*>1)` THEN 
      DEFINE SYMBOL plot_command = ($plot_command)/GAPLOC=sample_number
      DEFINE SYMBOL plot_plot_vars = x_var_data, y_var_data, var_data, gap_var
   ENDIF

   IF ($is_mooring"0|*>1") THEN  !?
      ($plot_command)($qualifiers)/missing=black/SET ($plot_plot_vars) 
   ELSE
      IF ($thinline"0|*>1") THEN PLOT/VS/LINE/OVER/NOLAB/COLOR=black ($thinline_plot_vars)
      ($plot_command)($qualifiers)/MISSING=black/SET ($plot_plot_vars)
   ENDIF

   IF ($ferret_annotations%0|*>1%) THEN GO key_at_top
   PPL RIBBON/OVER
ENDIF

! Hack: histogram levels
 IF `STRINDEX("($ferret_fill_levels)", "H") GT 0 OR STRINDEX("($ferret_fill_levels)", "h") GT 0` THEN \
($plot_command)($qualifiers)/missing=black/nokey  x_var_data, y_var_data, var_data 

SAY _________________ END line plot: clock seconds:                              ($clock_secs)
SAY _________________ total time for line plot, seconds                                     ----- `($clock_secs) - pre_plot`

IF ($ferret_plot_var"0|*>1") THEN
   LET data_range = minmax(var_data)
   DEFINE SYMBOL data_plotted_min = `data_range[i=1],prec=7`
   DEFINE SYMBOL data_plotted_max = `data_range[i=2],prec=7`
ENDIF

! Set the shape to what is used above it will be the same on the key
DEFINE SYMBOL ferret_poly_shape = ($ferret_poly_shape%square|delta|triangle|diamond|pentagon|hexagon|circle|star|plus|ex|*>square%)

! Add labels; unless all labels have been turned off

IF `($ferret_label"1|0|1|*>1") EQ 1` THEN
   
   ! Add the plot title on the bottom
   ! Nudge things down a little for 'yt and 'zt views because the time axis
   ! has years labeled beneath the months.
   
   IF `($ferret_annotations"0|*>1") EQ 0` THEN
      IF ($ferret_view"0|yt>1|zt>1|*>0") THEN
        LABEL/NOUSER `($ppl$xlen)/2`, `-0.6*($ppl$yorg)`, 0, 0, 0.14, @AC($ferret_plot_title) 
      ELSE
        LABEL/NOUSER `($ppl$xlen)/2`, `-0.5*($ppl$yorg)`, 0, 0, 0.14, @AC($ferret_plot_title) 
      ENDIF
   ENDIF
   
   IF ($t_lab_lo"0|*>1") THEN
      DEFINE SYMBOL n_left_labels `($n_left_labels"0") + 1`
      DEFINE SYMBOL upper_left_($n_left_labels) ($t_lab_lo)
      IF ($t_lab_hi"0|*>1") THEN DEFINE SYMBOL upper_left_($n_left_labels) ($t_lab_lo) to ($t_lab_hi)
      DEFINE SYMBOL time_lab ($upper_left_($n_left_labels))
   ENDIF

ENDIF ! ferret_label

! Add labels at the top for the dataset name etc if they exist  

GO labels_above_plot

! Add any constraint labels in the lower left, or as annotation notes.
! (The constraints themselves are handled in the data request from ERDDAP.
!  We do not need masking for constraints in map plots.)

IF `($ferret_annotations%0|*>1%)` THEN

   IF `($nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL nmask_labels = 1

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
         DEFINE SYMBOL note_num = `($note_num"0") + 1`; \
         DEFINE SYMBOL note_($note_num)_lab = ($mask_title_($mmask)); \
      ENDIF)
ELSE

   IF `$nmask_labels"0|*>1") EQ 0` THEN DEFINE SYMBOL nmask_labels = 1
   DEFINE SYMBOL label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   DEFINE SYMBOL label_x = `-0.95*($ppl$xorg)`
   DEFINE SYMBOL label_y = `-0.95*($ppl$yorg) + 0.2*(($nmask_labels)-1)`

   REPEAT/RANGE=1:`($nmask_labels)`:1/NAME=m (\
      DEFINE SYMBOL mmask = `m`;\
      IF ($mask_title_($mmask)"0|*>1) THEN ; \
        LABEL/NOUSER `($label_x)`, `($label_y)`, -1, 0, 0.12, ($mask_title_($mmask)) ; \
        DEFINE SYMBOL label_y = `($label_y) - 0.2`; \
      ENDIF)
ENDIF

! if constraints are shown via constraint_0_lhs etc, define labels for those
GO set_constraint_labels

! restore key-annotation setting: keys not annotated
KEYMARK 0


! Draw extra points, e.g. moorings as dots. Do this after
! annotations have been set up; if constraints are on platforms
! the markings will be more prominent.

IF ($custom_dataset"0|*>1") THEN 
    IF `($ferret_is_($custom_dataset)"0|*>1") AND ($custom_post_trajectory"0|*>1")` THEN \
     GO ($custom_post_trajectory)
ENDIF


! Save the results

GO LAS_results box

! End of file ------------Trajectory_2D_poly.jnl--------------------------

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
SAY _________________ exiting Trajectory_2D_poly.jnl product script: 

SAY _________________ Product script total execution time, seconds:                         ----- `($clock_secs) - ($start_clock_seconds)`
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! NOTE Can get just the timing info from a log of this product with
! grep seconds log.out | grep -v "SAY " | grep -v MESSAGE | grep -v independent 
!
! Or just the totals for decimating, plotting and the whole script with 
! grep seconds log.out | grep -v "SAY " | grep -v MESSAGE | grep -v independent | grep total 
