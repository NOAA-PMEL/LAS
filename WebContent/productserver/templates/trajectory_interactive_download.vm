#if ($las_request.getProperty("las", "output_type") == 'json')

$las_response.toJSON()

#elseif ($las_request.getProperty("las", "output_type") == 'xml')

$las_response.toString()

#else
<html>
<head>
    <!-- Let IE know to use the IE9 standard browser and document modes -->
    <meta http-equiv="X-UA-Compatible" content="IE=9">

<TITLE>LAS Interactive Download</TITLE>
  <script language="JavaScript" src="JavaScript/components/xmldom.js"></script>
  <script language="JavaScript" src="JavaScript/components/LASRequest.js"></script>
  <script language="JavaScript" src="JavaScript/components/LASResponse.js"></script>
  <script language="JavaScript" src="JavaScript/components/LASGrid.js"></script>
  <script language="JavaScript" src="JavaScript/components/DateWidget.js"></script>
  <script language="JavaScript" src="JavaScript/components/MenuWidget.js"></script>
  <script language="JavaScript" src="JavaScript/components/sarissa.js"></script>
  <script language="JavaScript" src="JavaScript/components/json.js"></script>

<SCRIPT language="javascript">
  #set($dsID = $las_request.datasetIDs.get(0))
  #set($varID = $las_request.variableIDs.get(0))
  #set($grid = $las_config.getGrid($dsID,$varID))
  #set($grid_JSON = $grid.toJSON().toString())
  #set($serverURL=$las_config.getBaseServerURL());

  var gridJSON = '$grid_JSON';
  //parse the gridJSON object
  var Grid;
  var JSONObject;
  try{
      var JSONObject = gridJSON.parseJSON();
  }catch(e){
      alert('Error parsing gridJSON as JSON.');
  }
  try{
      Grid = new LASGrid(JSONObject);
  }catch(e){
      alert(e);
  }

  var baseURL = "$serverURL";                        //base server URL
  var dsId   = "$dsID";                              //initial dataset ID
  var varId  = "$varID";                             //initial variable ID
  var initReq;
  var initView;
  var initXLo;
  var initXHi;
  var initYLo;
  var initYHi;

  var dataTLo;
  var dataTHi;
  var dataHasT;
  var tDisplayType;
  var tRenderFmt;
  var tUnits;
  var tDelta;

  var reqTLo; 
  var reqTHi;

  var dataZLo;
  var dataZHi;
  var dataHasZ;

  var reqZLo;
  var reqZHi;

  var dataFormat = 0; //0:netCDF,1:ascii,2:csv  // arcGrid and shape file not used, may want shape file back...
  var dataVariables = 1; // 0:minimal, 1:standard, 2:everything

  var newReq;

  var initReq_xml = "$las_request.toJavaScriptSafeString()"; //initial LAS request
  initReq = new LASRequest(initReq_xml);
  initView = initReq.getProperty('ferret','view');
  initXLo = initReq.getRangeLo('x');
  initXHi = initReq.getRangeHi('x');
  if(initXHi==null){initXHi=initXLo;}
  initYLo = initReq.getRangeLo('y');
  initYHi = initReq.getRangeHi('y');
  if(initYHi==null){initYHi=initYLo}

  reqTLo = initReq.getRangeLo('t');
  reqTHi = initReq.getRangeHi('t');
  reqZLo = initReq.getRangeLo('z');
  reqZHi = initReq.getRangeHi('z');

  // Only show the z and/or t control if those axes have not be transformed away...
  var showt = true;
  var showz = true;  

  if(initReq.getAnalysis(0)) {
	for(var a=0;a < initReq.getAnalysis(0).axis.length;a++) {
	    if ( initReq.getAnalysis(0).axis[a].type == "t" ) showt = false;
	    if ( initReq.getAnalysis(0).axis[a].type == "z" ) showz = false;
		if(initReq.getAnalysis(0).axis[a].lo) 
			eval("(req"+initReq.getAnalysis(0).axis[a].type.toUpperCase()+"Lo='"+initReq.getAnalysis(0).axis[a].lo+"')");
		if(initReq.getAnalysis(0).axis[a].hi)
                        eval("(req"+initReq.getAnalysis(0).axis[a].type.toUpperCase()+"Hi='"+initReq.getAnalysis(0).axis[a].hi+"')");
	}
  }

  if(Grid.hasAxis('t') && showt ){
      dataHasT = true;
      dataTLo = Grid.getLo('t');                      //low end of time grid
      dataTHi = Grid.getHi('t');                      //high end of time grid
      tDisplayType = Grid.getDisplayType('t');
      tRenderFmt = Grid.getRenderFormat('t');
      tUnits = Grid.getUnits('t');                   //units of time grid
      tDelta = Grid.getDelta('t');
  }

  if(Grid.hasAxis('z') && showz){
      dataHasZ = true;
      dataZLo = Grid.getLo('z');                     
      dataZHi = Grid.getHi('z');                      
  }

  function launch(){
    genFormatMenu();
    genVariablesMenu();
    // For trajectory data just use the request and do not set up menus.  
    // if(dataHasT){genDateWidget();}
    // if(dataHasZ){genDepthWidget();}
  }

  function genFormatMenu(){
    //data format
    fmt = "";
    fmt += "<select name='download_format' onChange='setDataFormat(this.selectedIndex)'> ";
    fmt += "<option value=0 selected>NetCDF</option>";
    fmt += "<option value=1>TSV</option>";
    fmt += "<option value=2>CSV</option>";
    fmt += "</select>";
    document.getElementById("format").innerHTML = fmt;
  }

  function genVariablesMenu() {
    // variables to include in the download
    fmt = "";
    fmt += "<select name='download_variables' onChange='setDataVariables(this.selectedIndex)'> ";
    fmt += "<option value=0>Shown and location variables</option>";
    fmt += "<option value=1 selected>Shown and all standard variables</option>";
    fmt += "<option value=2>All available variables</option>";
    fmt += "</select>";
    document.getElementById("variables").innerHTML = fmt;
  }

  function genUI(){

    //selected region
    var UIString = "<b><h2>Download Data</h2></b>";  
    UIString += "<table cellpadding='5'><tr><td valign=top><b>Selected Region</b></td>";
    UIString += "<td>Longitude range: [" + initXLo+", "+initXHi+"]";
    UIString += "<br />Latitude range: [" + initYLo+", "+initYHi+"]";
    if(dataHasT){
      // As specified in the request. No widget will be built or used.
      UIString += "<br />Time range: ["+ reqTLo + ", " + reqTHi+"]";
    }
    if(dataHasZ){
      UIString += "<br />Depth range: [" + dataZLo + ", " + dataZHi + "]";
    }
    
    #set($cont = $las_request.getVariableConstraints())
    #foreach ($con in $cont)
       #set($con_var_name = $las_config.getVariableTitle($con.getVariableXPath()))
       UIString += "<br />Constraint: [$con_var_name $con.getHTMLOp() $con.getValue()]"
    #end
    
    UIString += "</td></tr>";

    //data format menu
    UIString += "<tr><td></td><td></td></tr>";
    UIString += "<tr><td valign=top><b>Data Format</b></td><td><div id='format'></div></td></tr>";

    // data variables menu
    UIString += "<tr><td></td><td></td></tr>";
    UIString += "<tr><td valign=top><b>Data to download</b></td><td><div id='variables'></div></td></tr>";

    // download and close button
    UIString += "<tr><td>&nbsp;</td><td>&nbsp;</td></tr>";
    UIString += "<tr><td>";
    UIString += "<input type='button' name='download_submit' value='Download' onClick='submit()' />";
    UIString += "</td><td>";
    UIString += "<input type='button' value='Close' onClick='window.close()' />";
    UIString += "</td></tr>";

    UIString += "</table>";

    document.write(UIString);
  }
  
  //create and send the LAS request to download data
  function submit(){
    newReq = updateLASRequest();
    sendLASRequest(newReq);
  }

  //set format of download data
  function setDataFormat(index){
    dataFormat = index;
    //reset date and depth widget
    getWidgetState(); 
    if ( index == 4) {
      document.getElementById('DateWidgetRange').style.visibility="hidden";
      document.getElementById('DepthWidgetStart').style.visibility="hidden";
      if (document.getElementById('DepthWidgetEnd')) {
         document.getElementById('DepthWidgetEnd').style.visibility="hidden";
      }
    } else {
      // For trajectory data just use the request and do not set up menus.  
      // if(dataHasT){genDateWidget();}
      // if(dataHasZ){genDepthWidget();}
    }
  }

  //set format of download data
  function setDataVariables(index){
    dataVariables = index;
  }

  function getWidgetState(){
    //get user selected date range
    if(dataHasT){
      if(tDisplayType == 'widget'){
        reqTLo = DW.getDate1();
        reqTHi = DW.getDate2();
      }else if(tDisplayType == 'menu'){
        reqTLo = MW1.getValue();
        reqTHi = MW2.getValue();
      }
    }

    //get user selected depth range
    if(dataHasZ){
      reqZLo = dpMW1.getValue();
      reqZHi = dpMW2.getValue();
    }
  }

  //create the LAS request
  function updateLASRequest(){
    var req = new LASRequest(initReq_xml);

    //set view
    if(dataHasT){
      if(dataHasZ){
        req.setProperty('ferret', 'view', 'xyzt');
      }else{
        req.setProperty('ferret', 'view', 'xyt');
      }
    }else{
      if(dataHasZ){
        req.setProperty('ferret', 'view', 'xyz');
      }else{
        req.setProperty('ferret', 'view', 'xy');
      }
    }

    //arcGrid: only for xy map
    if(dataFormat == 3 || dataFormat == 4){req.setProperty('ferret', 'view', 'xy');}

    //set output format for TSV and CSV
    if(dataFormat == 1){
      req.setProperty('ferret','data_format','tsv');
    } else if(dataFormat == 2) {
      req.setProperty('ferret','data_format','csv');
    }

    //set operation
    if(dataFormat == 0) {
      req.setOperation('Trajectory_Data_Extract_netCDF');
    }else if(dataFormat == 1){
      req.setOperation('Trajectory_Data_Extract_TSV');
    }else if(dataFormat == 2){
      req.setOperation('Trajectory_Data_Extract_CSV');
    }else if(dataFormat == 3){
      req.setOperation('Trajectory_Data_Extract_ArcView');
    }else if(dataFormat == 4){
      req.setOperation('Shape_File');
    }

    if ( dataVariables == 0 ) {
      req.setProperty("download", "data_variables", "minimal");
    } else if ( dataVariables == 1 ) {
      req.setProperty("download", "data_variables", "standard");
    } else if ( dataVariables == 2 ) {
      req.setProperty("download", "data_variables", "everything");
    }

    return req;
  }

  //open a new window with the request as URL
  function sendLASRequest(lasReq){
    var prefix =  baseURL + '/ProductServer.do?xml=';
    var url = prefix+escape(lasReq.getXMLText());
    var OpenWindow=window.open(url, "newwindow", "height=450, width=650,toolbar=1,menubar=1,scrollbars=1,status=1");
  }

  //generate the depth widget
  function genDepthWidget(){
    var dpWidget = document.getElementById("depthWidget");

    var dpw = "<div id='DepthWidgetStart' ></div><br />";
    if(dataFormat != 3){dpw += "<div id='DepthWidgetEnd' ></div><br />";}
    dpWidget.innerHTML = dpw;

    menu = Grid.getMenu('z');

    dpMW1 = new MenuWidget(menu);
    dpMW1.render('DepthWidgetStart');
    if(reqZLo != null){
      dpMW1.setValue(reqZLo);
    }else{
      dpMW1.setValue(dataZLo);
    }

    if(dataFormat != 3){
      dpMW2 = new MenuWidget(menu);
      dpMW2.render('DepthWidgetEnd');
      if(reqZHi != null){
        dpMW2.setValue(reqZHi);
      }else{
        if(reqZLo != null){
          dpMW2.setValue(reqZLo);
        }else{
          dpMW2.setValue(dataZHi);
        }
      }
    }
  }

  //generate the date widget
  function genDateWidget(){
    var dtWidget = document.getElementById("dateWidget");
    
    var dtw="";
    if(tDisplayType == 'widget'){
      dtw += "<br /><div id='DateWidgetRange' ></div><br />";
    }else if(tDisplayType == 'menu'){
      var dtw = "<div id='DateWidgetStart' ></div>";
      if(dataFormat != 3){//for arcGrid, no need of end date
        dtw += "<div id='DateWidgetEnd' ></div><br />";
      }
    }
    dtWidget.innerHTML = dtw;
 
    if(tDisplayType == 'menu'){
      menu = Grid.getMenu('t');
      if(menu != null){
        MW1 = new MenuWidget(menu);
        MW1.render('DateWidgetStart');
        if(reqTLo != null){
            MW1.setValue(reqTLo);
        }else{
            MW1.setValueByIndex(0);
        }
        if(dataFormat != 3){
            MW2 = new MenuWidget(menu);
            MW2.render('DateWidgetEnd');
            if(reqTHi != null) {
                MW2.setValue(reqTHi);
            }else{
                if(reqTLo != null){
                  MW2.setValue(reqTLo);
                }else{
                  MW2.setValueByIndex(menu.length-1);
                }
            }
        }
      }
    }else if(tDisplayType == 'widget'){
        if(tRenderFmt == 'YMDT'){
            if(tUnits == 'hour'){
                DW = new DateWidget(dataTLo, dataTHi, 60*tDelta);
            }
            if(tUnits == 'minute'){
                DW = new DateWidget(dataTLo, dataTHi, tDelta);
            }
        }else{
            DW = new DateWidget(dataTLo, dataTHi);
        }

        if(tRenderFmt == '' && tUnits == "month"){
            if(dataFormat == 3){//arcGrid
              DW.render('DateWidgetRange', 'M');
            }else{
              DW.render('DateWidgetRange', 'M', 'M');
            }
        }else{
            if(dataFormat == 3){//arcGrid
              DW.render('DateWidgetRange', tRenderFmt);
            }else{
              DW.render('DateWidgetRange', tRenderFmt, tRenderFmt);
            }
        }

        if(reqTLo != null){
            DW.setValue(reqTLo, 1);
        }else{
            DW.setValue(dataTLo, 1);
        }

        if(dataFormat != 3){
          if(reqTHi != null && reqTHi != ""){
            DW.setValue(reqTHi, 2);
          }else{
            if(reqTLo != null){
              DW.setValue(reqTLo, 2);
            }else{
              DW.setValue(dataTHi, 2);
            }
          }
        }
    }
  } 
</SCRIPT>
</HEAD>

<BODY BGCOLOR="#FFFFFF" onLoad="launch()">
  <SCRIPT language="javascript">
    genUI();
  </SCRIPT>
 </BODY>
</html>
#end
